#!/usr/bin/env python
# -*- coding: utf8 -*-

"""
    This file as a hole is published under the MIT license:

    ‚úÇ----------------------------------------------------------------------

    The MIT License (MIT)

    Copyright (c) 2013-2016 Ned Batchelder, Stephan Hennig, Werner Lemberg,
    Guenter Milde, Sander van Geloven, Georg Pfeiffer, Gisbert W. Selke,
    Tobias Wendorf, Lukas Sommer.

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    ‚úÇ----------------------------------------------------------------------

    This file contains public domain code from Ned Batchelder:
    ‚ÄúNed Batchelder, July 2007. This Python code is in the public domain.‚Äù
    See the Hyphenator class for details. Modifications from Lukas
    Sommer (2016), published under the MIT license.

    It contains patterns that are derived from the Trennmuster project,
    that publishes its files under the MIT license.
    Copyright (c) 2013-2014 Stephan Hennig, Werner Lemberg, Guenter Milde,
    Sander van Geloven, Georg Pfeiffer, Gisbert W. Selke, Tobias Wendorf.
    See the GermanLigatureSupport class for details.

    The rest of the code is from Lukas Sommer (2016), published under
    the MIT license.
"""

import re
import scribus

# This file is in UTF8. It uses also really quite some characters outside
# ASCII and even outside BMP. As sometimes the encoding makes problems
# (Scribus script console for example), we assert here that the encoding
# is interpreted correctly
if ord("a") != 97:
    raise RuntimeError("Source code encoding problem 01.")

if len("a") != 1:
    raise RuntimeError("Source code encoding problem 02.")

if ord(u"\xE4") != 0xE4:
    raise RuntimeError("Source code encoding problem 03.")

if len(u"\xE4") != 1:
    raise RuntimeError("Source code encoding problem 04.")

if ord(u"\u00E4") != 0xE4:
    raise RuntimeError("Source code encoding problem 05.")

if len(u"\u00E4") != 1:
    raise RuntimeError("Source code encoding problem 06.")

if ord(u"\U000000E4") != 0xE4:
    raise RuntimeError("Source code encoding problem 07.")

if len(u"\U000000E4") != 1:
    raise RuntimeError("Source code encoding problem 08.")

if ord(u"√§") != 0xE4:
    raise RuntimeError("Source code encoding problem 09.")

if len(u"√§") != 1:
    raise RuntimeError("Source code encoding problem 10.")

if ord(u"\u1E9E") != 0x1E9E:
    raise RuntimeError("Source code encoding problem 11.")

if len(u"\u1E9E") != 1:
    raise RuntimeError("Source code encoding problem 12.")

if ord(u"\U00001E9E") != 0x1E9E:
    raise RuntimeError("Source code encoding problem 13.")

if len(u"\U00001E9E") != 1:
    raise RuntimeError("Source code encoding problem 14.")

if ord(u"·∫û") != 0x1E9E:
    raise RuntimeError("Source code encoding problem 15.")

if len(u"·∫û") != 1:
    raise RuntimeError("Source code encoding problem 16.")

if ord(u"\U0001F404"[0]) != 0x1F404 and ord(u"\U0001F404"[0]) != 0xD83D:
    raise RuntimeError("Source code encoding problem 17.")

if len(u"\U0001F404") != 1 and len(u"\U0001F404") != 2:
    raise RuntimeError("Source code encoding problem 18.")

if ord(u"üêÑ"[0]) != 0x1F404 and ord(u"üêÑ"[0]) != 0xD83D:
    raise RuntimeError("Source code encoding problem 19.")

if len(u"üêÑ") != 1 and len(u"üêÑ") != 2:
    raise RuntimeError("Source code encoding problem 20.")


__version__ = '0.1'


class Hyphenator:
    """An implementation of Frank Liams hyphenation algorithm in
    Python.

    Original code by Ned Batchelder from
    http://nedbatchelder.com/code/modules/hyphenate.html
    Original license:
    ‚ÄúNed Batchelder, July 2007. This Python code is in the public domain.‚Äù

    Differently as the original implementation, this implementation
    adds Unicode support. On the other hand, some other features
    of the original implementation are not available.
    """
    def __init__(self, patterns):
        """Precondition: ‚Äúpatterns‚Äù is of type ‚Äúunicode‚Äù.
        Postcondition: Constructs a hyphenator object for the
        given patterns.
        """
        if type(patterns) is not unicode:
            raise TypeError("The ‚Äúpatterns‚Äù parameter must be of type "
                            "‚Äúunicode‚Äù, but it isn‚Äôt.")
        self.tree = {}
        for pattern in patterns.split():
            self._insert_pattern(pattern)

    #
    def _insert_pattern(self, pattern):
        # Convert the a pattern like 'a1bc3d4' into a string of chars 'abcd'
        # and a list of points [ 0, 1, 0, 3, 4 ].
        chars = re.sub(u'[0-9]', u'', pattern)
        points = [int(d or 0) for d in re.split(u"[^0-9]", pattern)]
        # Insert the pattern into the tree.  Each character finds a dict
        # another level down in the tree, and leaf nodes have the list of
        # points.
        t = self.tree
        for c in chars:
            if c not in t:
                t[c] = {}
            t = t[c]
        t[None] = points

    def hyphenate_word(self, word):
        """ Precondition: ‚Äúword‚Äù is of type ‚Äúunicode‚Äù.
            Postcondition: Given a word, returns a list of pieces of
            type ‚Äúunicode‚Äù, broken at the possible
            hyphenation points. Note that patterns are typically
            lower-case-only, so you have to convert ‚Äúword‚Äù to
            lower-case before calling this function (otherwise
            the word might get wrong hyphenation because the
            upper-case-letters are not recognized).
        """
        if type(word) is not unicode:
            raise TypeError("The word must have the data type ‚Äúunicode‚Äù, "
                            "but it doesn‚Äôt.")
        else:
            work = '.' + word.lower() + '.'
            points = [0] * (len(work) + 1)
            for i in range(len(work)):
                t = self.tree
                for c in work[i:]:
                    if c in t:
                        t = t[c]
                        if None in t:
                            p = t[None]
                            for j in range(len(p)):
                                points[i + j] = max(points[i + j], p[j])
                    else:
                        break
            # No hyphens in the first two chars or the last two.
            # But we comment this code out because it is not
            # necessary for ligature setting.
            # points[1] = points[2] = points[-2] = points[-3] = 0
            # But it is necessary to do at least this, just to avoid empty
            # pieces. Otherwise, the pattern ‚Äúvon1‚Äù would lead for the
            # word ‚Äúvon‚Äù to the result ‚Äú[u"von", u""]‚Äù which is not intented.
            points[1] = 0
            points[-2] = 0
        # Examine the points to build the pieces list.
        pieces = ['']
        for c, p in zip(word, points[2:]):
            pieces[-1] += c
            if p % 2:
                pieces.append('')
        return pieces


class GermanLigatureSupport:
    """Provides support for german ligature setting. The pattern is derived
    from the word list of the Trennmuster project. Also get_word_characters()
    is derived from the Trennmuster project. For more information about
    the Trennmuster project: http://projekte.dante.de/Trennmuster

    License of the Trennmuster project:

    The MIT License (MIT)

    Copyright (c) 2013-2014 Stephan Hennig, Werner Lemberg, Guenter Milde,
    Sander van Geloven, Georg Pfeiffer, Gisbert W. Selke, Tobias Wendorf

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."""

    def __init__(self):
        return

    def simple_case_fold_for_lookup(self, my_unicode_string):
        """Before applying the hyphenation algorithm to a string, some
        ‚Äúfolding‚Äù has to be done. The german word ‚Äúauffallend‚Äù has the
        ligature ["auf", "fallend"]. If it is the first
        word of a sentence, than it is written with capital letter
         ‚ÄúAuffallend‚Äù. The ‚Äúcase‚Äù (the
        fact that a letter is a small letter or a capital
        letter) does not matter. You can read
        more about this topic in the Unicode standard:
        3.13 Default Case Algorithms ‚Üí Caseless matching
        The pattern uses lower case. So we have to map all
        upper case letters in a string to
        lower case letters before applying the
        hyphenation algorithm. Unicode describes
        ‚Äúfull case folding‚Äù and ‚Äúsimple case folding‚Äù.
        ‚Äúfull case folding‚Äù converts for example
        both lowercase √ü and uppercase ·∫û to ss: it
        maps one original character to two
        substitution characters. ‚Äúsimple case folding‚Äù
        leaves lowercase √ü as is, and converts
        uppercase ·∫û to lowercase √ü. I think the
        only relevant application of this ‚Äúone-to-many
        mapping‚Äù for the german language is the sharp
        s. As the patter is generated for
        both (normal german with √ü and swiss
        german without √ü but with ss), this ‚Äúone-to-many
        folding‚Äù is not necessary. A simple
        toLowercase() with additional mapping
        of the lowercase long s (≈ø) to the lowercase
        normal s should be enough.

        Preconditions: my_unicode_string is of type ‚Äúunicode‚Äù.
        Postconditions: Returns a ‚Äúunicode‚Äù value
        that corresponds to my_unicode_string, but has
        mapped uppercase characters to lowercase
        characters ‚Äì or at least these that are important
        for our patterns. The mapping is guaranteed
        to be a one-to-one mapping of Unicode Scalar
        Values. That means that one Unicode Scalar
        Value is replaced by exactly one other
        Unicode Scalar Value. So the count of
        Unicode Scalar Values of the return value is equal
        to the count of Unicode Scalar Values of
        my_unicode_string. (Note that the count of code
        units might change between input and output
        if you do not use UTF32.)
        WARNING This function must be kept
        in synch with isWordCharacter().
        """
        if type(my_unicode_string) is not unicode:
            raise TypeError("The ‚Äúmy_unicode_string‚Äù parameter must be of "
                            "type ‚Äúunicode‚Äù, but it isn‚Äôt.")
        return my_unicode_string.lower().replace("≈ø", "s")

    """
    The following pattern has been generated using the Trennmuster project:
    http://projekte.dante.de/Trennmuster/
    This project provides a quite long list of german words with its hyphenation
    points and its morpheme boundaries, prefix boundaries, suffix boundaries‚Ä¶
    This can be used to generate ligature patterns.

    The current pattern is generated from the Trennmuster project at the
    following state: Sat, 10 Sep 2016 09:52:30 +0000
    http://repo.or.cz/wortliste.git/commit/c21d2f93e9ece64e47de9fc59e9115a0540c89a0

    Instructions for Linux shell:

    1.) Create a work directory
    > mkdir workdir
    > cd workdir

    2.) Clone the git repository of Trennmuster
    Preconditions: ‚Äúgit‚Äù is available.
    > git clone --depth 1 git://repo.or.cz/wortliste.git
    > git clone git://repo.or.cz/wortliste.git
    > cd wortliste
    > git config core.DeltaBaseCacheLimit 200m
    > cd ..
    For details, see http://projekte.dante.de/Trennmuster/RepoHaupt (german).

    3.) Create a directory for the data
    > mkdir datadir
    > cd datadir

    4.) Combine both, ‚Äúwortliste‚Äù and ‚Äúpre-1901‚Äù in one single file
    > cat ../wortliste/wortliste ../wortliste/pre-1901 > full-list.utf8
    The other available word lists currently do not provide informations
    about morpheme boundaries, so it does not make sense to use them.

    5.) Preprocess it
    Preconditions: ‚Äúpython 2.7‚Äù is available.
    > python ../wortliste/skripte/python/ligatures/prepare-ligature-wordlist.py \
       full-list.utf8 patgen-input.utf8 preprocess-log.utf8

    6.) Convert to ISO 8859-15
    Preconditions: ‚Äúiconv‚Äù is available.
    > iconv -f UTF-8 -t ISO_8859-15 patgen-input.utf8 > patgen-input.iso-8859-15
    Patgen only accepts single-byte encodings, and ISO 8859-15 is an encoding
    that covers all necessary characters and is the one that is also used
    by ‚Äúgerman.tr‚Äù in the Trennmuster project.

    7.) Generate the pattern
    > sh ../wortliste/skripte/make-full-pattern.sh patgen-input.iso-8859-15 \
      ../wortliste/daten/german.tr
    This takes about 20 minutes.

    8.) Convert the pattern to UTF8
    > iconv -f ISO_8859-15 -t UTF-8 pattern.8 > ligature-pattern.utf8.txt
    """
    __germanLigaturePatterns = (u"""
.ab1a
.ab1or
.ab1u
.amts1
.an1
.ana1c
.ap1p
.auf1
.bi1na
.bio1
.bit1a
.da1l
.dar1i
.darm1
.de1i
.de1mi
.de1o
.de1s
.de1te
.dorf1
.ehe1
.eis1t
.ei1z
.end1r
.ent1
.er1e
.er1i
.er1t
.e√ü1
.eu1tr
.ex1te
.ge1bu
.ge1hu
.geld1
.ge1lu
.ge1r
.ge1u
.haut1
.hof1e
.il1
.im1pe
.in1e
.in1g
.in1z
.ko1i
.kom1m
.kopf1
.n√§s1c
.nuss1
.ob1a
.ob1l
.ot1a
.√∂l1l
.√∂l1z
.re1b
.re1mi
.re1q
.ruhr1
.so1ge
.tat1u
.t√∂r1c
.ufer1
.um1
.un1a
.un1d
.un1g
.un1k
.un1n
.un1z
.ur1
.uro1
.zer1n
a1ab
a1ace
aa1do
aal1di
aale1t
aal1t
a1an
aan1g
a1aq
aar1a
aar1ma
aar1ta
aar1th
1aas
aas1t
aat1r
aats1
a1au
a1√§
ab1au
ab1√§
1abd
a1bec
abe1e
ab1eil
1abent
aben1z
ab1erk
ab1err
ab1erz
ab1e√ü
1abf
1abg
1abh
ab1ins
a1b1ir
abi1st
ab1it
1abk
ab1l
1abla
1abl√§
1abl√∂
1abn
1abon
abo1se
ab1r
1absc
1absp
1absta
ab1t
1abtei
1abtr
abu1b
ab1ur
1abw
1abz
ach1a
ach1ec
ach1eh
ach1ei
ach1l
ach1m
ach1n
ach1ob
ach1r
acht1o
ach1uf
ach1w
a1cu
ad1ama
ad1an
1adap
adar1
ad1au
1ad√§
ad1c
1add
ade1ro
ade1s
a1dikt
adio1s
1adj
ado1m
1adop
ad1rec
ad1rei
ad1run
adt1
1adv
a1eb
a1ed
a1ei
a1em
aeo1
a1ep
a1erh
aero1
a1ex
af1ab
af1an
af1au
af1ec
af1l
a1flu
afo1s
af1rau
af1r√§
af1re
af1r√∂
afs1p
aft1a
aft1r
af1ur
ag1ab
ag1ad
ag1am
ag1ar
ag1au
agd1
age1b
age1g
age1i
agel1e
1aggr
ag1id
ag1la
a1gons
ag1re
ag1ri
a1han
a1h√§
ahe1g
ahe1in
ahe1l
ah1erh
ahe1s
a1hi
ahl1a
ahl1ei
ahl1sz
ahme1i
ahn1a
1ahor
ah1os
ah1√∂
ahr1a
ah1se
aht1ex
aht1z
ah1w√§
a1hy
ai1a
aian1
aib1l
ai1bu
aids1t
aien1
ai1f
ai1gl
ai1ku
ai1l√§
ail1s
ail1t
ai1ma
ai1mo
a1ind
a1in1g
ai1ta
a1kam
1akaz
ak1em
ak1ent
aket1z
ak1ins
ak1res
ak1sh
ak1so
akt1r
1akz
al1ad
al1af
al1age
al1am
al1ana
al1ans
al1anz
al1arr
al1asi
al1ass
al1au
al1√§m
al1√§r
al1√§u
alb1l
alb1ru
al1c
al1dat
al1eb
al1ec
al1ef
al1eh
al1ei
a1leic
a1lek
al1el
al1epo
al1erb
al1erf
al1erg
al1erh
al1erl
al1err
al1ert
al1esk
al1eu
1algi
1algo
a1lief
a1limb
al1ind
al1ins
a1lip
alk1le
1alkoh
alk1s
all1ap
all1ar
al1l√§u
1allee
al1lip
al1lit
al1loh
al1n
al1ob
al1ont
al1√∂
al1skl
alt1ak
alt1an
alt1op
alt1ro
al1tur
alu1b
alu1f
alu1g
al1umb
al1ur
a1mac
ama1k
a1mal.
a1mals
am1ap
a1max
am1d
amen1e
am1erf
ame1s
a1mir
a1miss
1amt.
amt1a
amt1√§
amt1r
1an√§s
1anb
an1dac
and1ex
and1ur
1aneig
1anek
an1erk
anex1
1anf
1angab
ang1ar
1angeb
ang1ei
ang1la
ang1l√§
ang1n
ang1ra
1angri
angun1
1anh
ani1g
1anim
a1niv
ank1ak
ank1no
ank1ra
ank1r√§
ank1s
1anl
1anmu
1annah
ano1b
1anod
an1or
1anr
1ansc
ans1pa
ant1ar
1antei
1an1tr
1antw
anus1s
1anw
1anzei
anz1in
1anz√º
ao1m
a1op
a1or
ao1ts
a1√∂
apa1b
a1p√§
1apfel
a1pfl
a1ph√§
a1phr
apo1d
apo1k
a1pr
ap1to
ar1adr
ar1al
ar1ang
ar1ans
ara1nu
ar1anz
ara1p
ar1ap1p
ar1au
ara1ve
1arb
arb1au
arb1re
1arc
ar1chr
ard1r
are1b
a1rec
ar1eff
are1g
are1h
ar1ehr
ar1eid
a1reih
are1ra
ar1erh
are1te
arf1ra
arie1c
ar1int
ar1inw
a1riv
ark1ar
ark1l
arma1l
arm1eg
arm1ei
ar1od
ar1of
ar1op
ar1√∂
arr1ad
art1he
ar1tue
ar1uh
ar1ums
1arzt
arzt1r
arz1w
as1am
a1see
as1ef
a1seg
as1eie
as1emi
as1ent
aser1t
as1eta
a1seu
as1of
as1or
as1ped
as1ski
ass1p
ass1ti
ass1to
a1stas
as1tep
a1str
ast1re
as1t√ºr
1asyl
a√ü1er
a√ü1ti
at1abe
at1abr
ata1f
at1akt
at1apf
a1tass
at1au
at1√§n
a1tee
at1eig
ate1le
1ateli
ath1in
1athl
atie1b
1atm
1atomk
a1torh
at1ort
a1tow
at1r√§
at1re
at1rom
at1rot
a1tru
ats1o
ats1p
1attac
att1ak
att1r√§
att1s
at1tur
a1tub
atur1m
atur1t
atz1er
atz1in
atz1th
atz1w
au1a
auan1
aub1al
au1da
au1deg
au1du
au1eb
au1el
au1esc
auf1an
auf1er
au1fis
1aufn
au1fu
au1gar
au1gel
au1gem
au1ges
au1go
au1hi
auh1r
au1in
au1ka
au1la
au1l√§
au1lo
aul1ti
au1lu
au1l√º
aum1er1
au1min
aum1m
aum1o
aum1p
au1o
au1rei
au1rin
au1roc
au1r√∂
aus1ah
1ausd
1ausf
1ausg
1ausl
au1so.
1ausr
1auss
aus1si
aus1tr
1aus√º
1ausz
au1tal
aut1√§u
aut1el
au1tie
1auto
au1tr
aut1t
au1tur
a1√º
a1w√§
a1wo
a1wu
a1w√º
axi1d
axi1l
axi1v
ay1anz
ay1of
ay1ste
a1zep
azi1v
√§1am
√§1ar
√§bel1
√§b1l
√§che1e
√§ch1li
√§ck1n
√§1de1s
√§d1ia
√§1em
√§1ex
√§ff1le
√§f1l
√§g1a
1√§g√§
√§g1da
√§ge1i
√§g1l
√§1gna
√§g1str
1√§gy
√§h1a
√§h1ein
√§h1in
√§hl1a
√§h1ma
√§h1na
√§h1rob
√§h1w
√§1im
√§1j
√§1la
√§ll1a
√§lp1
√§1lu
√§1na
√§n1c
√§ne1s
√§nk1l
√§ns1a
√§ns1c
√§o1
√§1pa
√§ps1c
√§1pu
1√§q
√§qui1
√§r1a
√§r1√§
√§rb1l
√§r1c
√§r1ei
√§r1el
√§r1ene
√§r1eng
√§r1int
√§rke1t
√§rkom1
√§r1ma
√§r1mis
√§r1mu
√§r1of1
√§r1op
√§rts1
√§r1zi
√§se1h
√§se1i
√§se1ri
√§se1t
√§1si
√§1skr
√§s1p
√§ss1c
√§1sta
1√§sth
√§√ü1erk
√§t1a
√§te1h
√§te1i
√§te1l
√§t1ob
√§t1r
√§ts1i
√§ts1or
√§ts1p
√§ts1t
√§t1tis
√§ub1l
√§ude1
1√§ug
√§um1p
√§ums1
√§ure1
√§use1n
√§uss1c
1√§u√ü
√§1v
1√§x
√§1z
1ba
b1abs
back1s
bade1i
b1adm
b1adr
b1af
bak1er
bak1i
bak1l
bak1r
bal1da
b1am
band1a
b1ang
bank1a
b1anna
b1ans
b1ant
b1anz
bar1at
bau1b
bau1d
bau1f
bau1g
bau1h
bau1l
bau1r
bau1s
bau1ta
ba1w
b1ax
1b√§
b√§ch1l
b1b
b1c
b1d
bde1s
1beam
1bear
b1ebb
be1bel
be1ber
1bebt
be1bu
1bech
be1ci
1be1d
b1edel
be1eh
be1en
be1erl
be1ert
be1eta
b1eff
be1g
1begi
1begl
1be1h
1bei
bei1b
b1eier
bei1f
bei1g
bei1k
bei1l
bei1m
b1eime
be1ind
be1inh
bei1r
bei1s
bei1z
be1k
bel1d
be1le
bel1en
be1li
bel1k
bel1se
bel1sz
bel1ta
bel1tr
be1m
b1emp
1bened
be1nei
be1ni
ben1k
ben1n
b1entb
ben1ti
ben1tr
b1ents
be1q
be1ra
ber1d
be1re
1berg.
be1rie
be1rip
b1ernt
be1s
1besc
bes1er
bes1id
bes1sz
1bet
be1ta
be1th√∂
be1tit
1beu
be1um
be1ur
1bew
b1ex
b1f
b1g
bgas1
bge1
b1h
bi1ak
1bib
bi1enn
bi1f
bi1ga
bi1kar
bi1lab
bi1lat
1bild
bi1lin
1bill
b1illu
bi1lo
b1inb
b1inf
b1inh
b1int
1bio
bio1d
bio1i
bio1n
bio1r
bi1se
b1iso
bis1t
bi1sta
bi1tic
1bitt
bi1v
bi1ze
b1j
b1k
b1lac
b1lad
b1lag
1blat
b1late
blau1b
b1laus
b1law
b1l√§n
1bl√§t
b1leb
b1lee
b1leg
b1leid
b1lein
ble1l
ble1sz
1blick
1blit
bli1to
1bloc
b1los
1blum
1blut
blut1o
1bl√º
b1m
b1n
bnis1c
1bo
b1ob
bob1l
bob1r
bo1di
b1of
bo1fe
bo1k
bol1au
bol1c
bo1ma
bond1e
bon1e
b1onk
b1op
bord1r
bor1ma
b1ort
1b√∂
b1√∂l
b1p
b1q
1br
b1rad
b1rat.
b1ratg
brau1g
b1red
b1ref
b1reif
b1rek
b1rep
b1rese
b1riem
brik1t
b1ritt
b1roh1
b1rol
brot1t
b1rou
b1rund
brust1
b1s
bs1ad
bs1√§n
bs1eb
bs1ent
bs1er
bs1of
bs1s
bst1ab
bst1ak
bst1as
bs1t√§t
bst1er
bst1h
bst1ro
bs1un
b1ta
b1t√§
b1tei
bt1h
b1ti
b1to
b1t√∂
b1tr
b1tu
b1t√º
1buc
1bud
1buf
1buh
bull1a
bull1t
1bumm
1bund
b1une
b1ungn
1bur
burg1a
burg1l
burts1
1busi
bus1p
1buss
bus1tr
bus1un
1bu√ü
but1al
bu1th
1butt
1b√º
b1v
b1w
by1a
by1j
by1k
by1le
by1m
by1n
by1p
by1ra
by1r√§
by1si
by1st
1byt
by1th
b1z
bzeit1
1cab
ca1bl
1caf
calf1
cal1t
1cam
1cart
ca1se
1cau
c1b
c1do
ce1b
ce1g
cen1ta
ce1op
ce1q
ce1sh
ce1u
c1f
c1g
ch1ack
ch1ag
ch1ak
1chanc
ch1ang
1chao
1chara
chau1b
ch1√§h
ch1√§rm
ch1√§s
1ch√¢
1chef
che1g
ch1eie
ch1eil
ch1eim
1chemi
1cherc
ch1ess
ch1eta
che1te
ch1ex1
ch1ins
ch1int
ch1inv
chi1re
1chiru
ch1ler
ch1off
ch1oh
ch1orc
ch1ori
ch1√∂l
1ch√∂r
ch1rad
ch1res
ch1rh
ch1rin
1chron
ch1ums
ch1unf
ch1urs
c1int
1cip
c1j
ck1a
ck1√§
ck1eh
ck1ei
ck1erh
ck1err
ck1ese
ck1id
ck1in
ck1la
ck1l√§
ck1leb
ck1lei
ck1lin
ck1lis
ck1lo
ck1na
ck1n√§
ck1ni
ck1o
ck1q
ck1r
ck1sen
ck1so
ck1tal
ck1ti
ck1tr
ck1t√º
ck1um
ck1up
clip1a
1clu
c1me
c1mu
1co
co1be
co1mu
con1
co1t√§
1cre
cro1c
c1se
c1str
cup1
c1ve
1cy
c1z
da1a
d1a1b
d1ac
da1ca
d1ad
d1af
da1fe
d1ag
da1ge
da1h
da1in
d1alar
d1all
d1alp
d1alt
1dame.
da1mi
1damm
d1amma
d1amm√§
1damp
d1amt
d1ana
d1and
1dandy
d1anei
d1ang
1dank
dank1o
d1ann
1dann.
d1ans
dan1ta
d1anz
d1ap
da1pa
da1pe
dap1p
dar1a
d1arka
darm1i
dar1n
dar1o
d1art
dar1ta
dar1u
1darum
d1arz
da1s
1das1s
d1asy
1da√ü
daten1
d1atl
d1atta
1daue
d1auf
d1aus
da1we
d1ax
1d√§
d1√§g
d1√§h
d1√§mt
d1√§nd
d1√§ng
d1√§p
d√§r1t
d1√§rz
d1√§u
d1b
d1ca
d1ch
d1cu
d1d
de1b
d1eben
1deb√º
1dec
de1ch
de1d
de1eb
de1eg
de1er
de1es
1defek
d1eff
1defi
de1g
de1he
1dehn
d1ehr
d1ei
1deic
de1ind
de1k
1dekod
1dekor
del1√§n
del1d
de1leb
del1ec
de1les
de1lie
1delik
del1k
del1ob
dels1p
del1tr
de1luk
demie1
de1min
1demo
de1mot
d1emp
de1nam
1denkm
den1th
den1tr
deo1l
1depo
de1q
de1ram
de1rat
d1erbs
de1reo
der1ni
de1ros
der1ti
des1a
des1√§n
1descl
des1eh
d1esel
des1in
des1o
des1p
des1u
de1tal
de1tan
1detek
de1th
de1ti
de1tu
d1etw
1deu
de1un
de1url
1dex
d1f
d1g
dget1e
d1h
dia1b
1diag
dia1v
1dic
di1chl
dick1s
d1ide
1dieb
die1li
dien1d
dies1c
1digi
dig1l
1digm
1dign
di1kar
d1imb
di1mo
d1ind
d1inf
d1inh
d1init
d1ins
d1int
dio1b
1dip
1dir
d1ira
d1irl
dis1a
1disk
1dis1p
d1isr
dis1so
di1sta
dis1to
dis1tr
di1su
1disz
dit1r
dit1s
dit1tr
dit1u
dit1zi
1div
d1j
d1k
d1l
dl1s
d1m
d1na
d1n√§
d1ne
d1ni
dnis1t
d1no
d1n√∂
d1nus
d1n√º
d1ob
1doc
do1chi
do1d
d1of
do1ga
do1ge
1dok
do1lei
1doll
1dolm
domen1
donau1
don1te
do1pa
d1ope
d1opf
do1ph
dora1b
do1rat
d1ord
1dorf
dorf1a
d1org
dort1h
1dose
dot1o
do1tr
do1wi
dows1
1dox
d1√∂
d√∂l1
1d√∂r
d√∂s1c
d1p
dpass1
d1q
1dr
d1rad
d1ramp
d1rand
d1rast
drat1z
d1rauc
d1r√§t
d1r√§u
d1ref
dreh1r
d1reic
drei1g
drei1l
drei1t
d1ren
d1rep
d1rh
d1rieg
d1rind
d1rip
d1ris
d1ritu
d1rob
d1roc
d1rod
d1roll
d1rose
d1rost
d1rot
d1rou
d1rov
d1rud
d1s
ds1amt
ds1√§n
ds1eb
dsee1
ds1ef
ds1eh
ds1eng
ds1ent
ds1erf
ds1erk
ds1err
ds1eta
ds1im
ds1ori
ds1pas
ds1pat
ds1ph
ds1s
ds1tas
ds1th
ds1tis
ds1ums
d1ta
d1t√§
d1tee
d1tei
d1tel
dte1na
d1term
d1teu
d1to
d1t√∂
dt1r
dt1t
d1tu
d1t√º
dt1z
1duf
d1ufe
d1uh
1duk
1dul
dul1tr
d1umb
d1umd
d1um1e
d1ums
d1umv
d1und
d1unf
d1ungl
d1uni
1dunk
1duo
1dur
durch1
d1url
1duz
1d√º
d1v
d1w
dwest1
dy1c
dy1d
1dyn
dy1ne
dys1
d1z
e1a
ea1gat
eak1ta
eal1li
eal1ti
eal1u
eam1o
ear1ma
eater1
eat1s
eau1g
eau1sc
eaus1s
e1√§
e1bea
ebe1b
e1beku
e1beru
e1bez
e1bi
e1bl
eb1lo
ebs1i
ebs1o
ebs1p
ebs1th
ebs1ti
ebs1u
e1bus
e1but
e1ce
ech1√§
ech1ei
e1chip
ech1m
ech1ob
echo1l
ech1uh
ech1w
eckar1
eck1n
e1cl
e1cr
e1da
e1deb
e1def
e1dei
e1desi
e1dif
e1d√∂
eds1es
eds1o
eds1p
eds1tr
e1du
edy1
ee1b
ee1c
e1eck
eede1s
ee1di
ee1do
ee1e
e1eff
ee1g
ee1hu
e1ei
ee1k
ee1leo
e1emb
ee1me
ee1min
e1emp
ee1nad
ee1n√§
e1end
een1da
e1ent
ee1ny
e1enz
ee1q
ee1rat
e1erbt
e1erd
eer1ei
eeres1
ee1ro
ee1r√∂
eer1ti
e1erz
ee1s
ee1ta
ee1u
e1ex
e1f
ef1ad
ef1ana
ef1ar
ef1eb
ef1em
ef1ene
efex1
1effek
1effi
ef1id
ef1ins
ef1n
efon1t
ef1rol
ef1rom
ef1tel
e1ga
ega1d
eg1am
eg1d
e1gei
e1gel√§
egen1a
ege1u
e1gis
e1gl
eg1n√§
e1go
e1g√∂
egser1
e1ha
eh1ach
eh1arm
e1h√§
e1hec
eh1eff
e1hei
e1helf
eh1elt
1ehep
eh1erf
eh1erl
e1hi
eh1lam
eh1l√§
ehl1or
eh1ma
eh1mo
eh1na
eh1ni
eh1no
e1ho
eh1oly
ehr1a
ehr1√§
ehr1ec
ehr1ob
eh1roc
ehr1of
eh1se
eh1sh
eh1ste
eh1ta
eh1tel
eh1ti
eh1tu
e1huh
e1hul
eh1ums
e1hup
e1hus
e1hut
e1h√º
eh1w
e1hy
ei1a
eian1
ei1bie
ei1bus
ei1ce
eid1a
ei1due
ei1eb
ei1ec
ei1el
ei1emi
ei1erz
ei1esk
ei1fla
1eifr
ei1ga
ei1gie
1eign
ei1ka
ei1ki
ei1kla
ei1ku
ei1l√§
eil1c
eil1d
ei1leg
ei1lie
ei1lis
ei1lit
eil1l
ei1lo
eil1se
eil1z
eim1ag
ei1mal
ei1mas
eim1m
ei1mo
eim1or
ei1mu
ein1a
ein1√§
ein1g
e1init
ein1k
1eink√§
ein1n
ein1ob
ei1not
1einri
1einu
ei1o
ei1pf
ei1q
ei1re
e1irr
ei1sit
ei1sto
eit1ab
eit1h
eit1t
eit1um
ei1t√º
eit1z
ei1v
eiz1in
e1j
e1ka
1ekd
e1ke
e1ki
e1kl
eks1p
ekt1at
ekt1ob
e1kuc
e1kum
1ekz
e1la
el1af
el1ak
el1am
el1ana
el1ans
el1ant
el1anz
el1ap
el1ar
el1asi
el1asp
ela1su
e1l√§
el1c
el1di
el1do
el1dy
el1ech
e1legu
e1leid
el1ein
e1leis
e1leit
1elek
el1el
1elem
el1emb
el1emi
el1emp
el1ent
elen1z
el1erd
el1erf
el1erg
el1erk
el1erl
el1err
el1erw
el1ess
el1eta
el1eti
e1lev
el1evo
el1ex
1elf.
1elfm
1elft
el1id
e1lif
e1lil
elin1a
el1ind
el1ita
e1litu
e1liz
el1ku
el1lac
el1lad
el1lag
el1l√§d
el1l√§n
el1lo
el1ni
e1lo
el1oa
el1obe
elo1m
el1or
el1ses
el1tat
el1tee
el1the
el1ti
el1tri
el1tro
el1tur
e1lud
el1uf
e1lui
e1lul
el1um
el1ur
e1lus
el1use
el1uto
e1l√º
e1ma
em1alk
em1ano
em1ans
em1app
1embo
e1mec
e1mei
em1erl
em1erw
1emeti
e1meu
em1id
e1mil
em1int
1emiss
em1n
emo1k
e1mol
e1mon
1emp1f
em1pfl
ems1tr
em1th
e1mu
1emul
e1my
en1ack
e1nai
en1al
en1am
en1ap
enap1p
en1as
e1nase
en1atl
en1att
en1ax
en1az
en1√§
en1c
1ency
en1dac
en1dat
en1die
en1din
en1do
end1t
en1due
en1dus
en1dy
en1ec
e1neig
en1ekl
en1el
en1ema
en1eng
en1ent
en1ep
en1erb
en1erd
1energ
en1erk
en1erl
en1ers
en1ert
en1eru
en1erw
en1esc
en1ess
en1eta
en1ev
en1g
1engad
1engag
1engp
e1nic
e1niet
en1iko
en1ima
en1imi
e1nip
e1niv
e1no
en1oa
en1ob
en1oc
en1oli
en1olm
en1op
en1or
en1ost
e1n√∂
en1√∂d
1ensem
en1tas
1entd
en1tee
1entf
1entga
en1thr
1entla
1entn
en1to
ent1os
1entsc
1entso
1entw
1entz
en1u
e1n√ºg
en1zeh
e1ob1
eo1bi
eo1bu
eo1c
eo1da
e1of
eof1f
eo1g
e1oh
eo1ha
eo1ho
eo1k
e1oly
eo1m
eo1o
e1ope
e1opf
e1or
eo1s
eo1t
eo1w
e1√∂
e1p
epe1ta
epi1
1epid
1epis
1epit
1epoc
epp1l
er1a
e1rass
era1tr
e1raub
era1w
e1r√§
er1√§h
er1√§m
er1√§s
er√§te1
er1√§tz
er1c
1erdb
1erdg
er1di
er1eb
e1rec
er1eck
e1red
er1edi
e1ref
er1eff
er1eh
erei1b
e1reih
er1el
er1ema
e1renk
e1renn
e1repa
er1epe
er1erh
er1ers
er1ess
er1e√ü
er1eta
er1eti
er1eul
e1rev
erg1s
1erhab
er1id
erien1
er1inb
er1ini
er1ink
er1inl
er1int
e1rit
1erkl√§
erk1ti
erk1to
erk1tr
er1m
er1ob
er1of
erof1f
ero1g
e1roh
er1oly
ero1ny
er1op
e1rou
er1ox
er1√∂s
ert1ab
er1tal
er1tar
er1tat
er1thi
er1thr
er1tis
er1to
er1tue
e1ruc
e1rud
e1rui
er1um
e1rumm
er1und
e1rup
er1up.
er1uz
es1ad
es1av
es1ax
e1sc
e1se
es1ebe
es1ehr
esen1o
eser1u
es1eta
e1si
es1il
e1so
e1s√∂
es1pat
es1ph
1essay
es1soh
es1soz
ess1pa
est1ak
e1star
est1as
e1stel
e1stil
est1ob
e1stu
e1su
es1um
es1ur
e√ü1el
e√ü1erg
e√ü1ti
e1tac
e1talb
e1tals
et1ami
et1ant
e1t√§
et1√§h
e1tei
et1ein
e1tek
e1temp
e1term
e1teu
1ethi
1ethn
et1ini
e1tip
et1obe
et1of
etof1f
e1tone
e1tonu
eto1ph
e1t√∂
e1tr
et1rec
et1rel
et1res
et1so
et1su
ett1a
etto1r
ett1ra
ett1ro
ett1um
e1tul
et1ups
e1tur
e1tus
e1t√º
etzes1
eu1a
euan1
eu1b
eude1s
eue1b
eu1eng
eu1ent
eu1fu
eug1a
eu1go
eug1r
eu1h
eu1in
1euk
eu1la
eu1li
eu1lo
eu1mo
eums1p
eu1mu
e1ung
eu1o
eu1p
eur1d
eu1rei
eur1m
1euro
eur1t
eu1ru
eu1sel
eu1si
eu1so
eu1sto
eu1str
1eutha
eu1tor
euz1w
e1√º
e1v
evas1
e1w
ex1er
ex1in
1exis
ex1l
1exp
1extr
ey1c
ey1da
eye1l
ey1k
ey1l
ey1m
ey1na
ey1p
ey1ru
ey1s
e1z
ezo1f
√©1h
√©1lu
√©1t
√©1u
√©1v
1fa
f1abl
f1abs
fach1i
f1ader
fa1ec
fa1ki
f1amt
fang1t
f1ank
f1anp
f1an1z
f1ap
farb1l
f1art
f1astr
f1a√üe
f1at
f1auf
f1ausb
1f√§
f√§hr1u
f1√§lte
f1√§rm
f1√§rz
f1b
fbe1
f1c
f1d
fe1b
f1eck
fe1em
fee1t
1feh
1feie
f1eing
f1einw
f1eis
fel1a
1feld
fel1er
fe1lie
1fell.
1felle
1fells
fel1o
fel1tr
fel1tu
f1emp
fen1a
1fensi
f1ent
fen1ta
fen1te
fen1z
fer1√§
ferde1
fe1rel
fe1rol
1ferts
1fertt
fest1a
fest1r
f1eta
fe1tie
fett1r
1feue
f1ex
ff1ad
ff1ans
ff1ar
ff1au
ff1ei
ffel1l
ff1emi
ff1f
f1fis
ff1lag
ff1loc
f1flu
f1fl√º
f1fr
ff1ro
ffs1p
ff1ti
f1g
fge1
f1h
1fiel
fi1erf
fi1go
fik1o
fik1r
fik1te
1fil
fil1an
fil1da
fil1l
fi1ma
1fin
f1inf
f1int
1fir
fi1ra
f1iso
fit1o
fi1tu
fi1v
f1j
f1k
fka1k
f1lad
f1lap
f1l√§d
f1l√§n
f1l√§u
f1leb
f1lein
1flim
f1lin
1flop
1flot
1flug
flut1o
f1m
f1na
f1n√§
f1ni
f1no
f1n√º
1fo
f1ob
fo1bu
fo1d
f1of1
fo1ha
fo1la
fo1ma
fon1di
fon1te
f1op
fo1rad
f1org
fort1
fo1ta
fo1tel
foto1
fo1tr
f1ox
1f√∂
f1√∂k
f1√∂l
f1p
f1q
f1rad
f1rah
f1rand
f1rap
fra1sc
f1rat
1frau.
frau1c
1fr√§n
f1rec
f1red
f1ref
f1reic
frei1g
f1rek
f1rep
f1rest
fro1b
f1roc
1fron
fron1d
f1rot
f1ru
fr√ºh1m
f1s
fs1al
fs1as
fs1eb
fs1ehr
fs1ent
fs1er
fs1eta
fs1id
fs1o
fs1pas
fs1pel
fs1ph
fs1s
fs1t√§t
fs1th
fs1tic
fs1tis
fs1un
f1ta
ft1af
ft1an
ft1ar
f1t√§
ft1√§u
ft1ed
fte1g
ft1eh
f1tei
ft1eig
ft1ein
ft1eis
f1temp
ft1ent
ft1erk
ft1erl
f1term
ft1eti
ft1ex1
ft1h
f1tis
f1to
ft1of
fton1
ft1op
ft1or
ft1ot
f1t√∂
f1tr
ft1ro
fts1
ft1t
ft1url
f1t√º
ft1z
1fuc
1fuh
f1um
f1unf
f1ungl
f1uni
funk1r
f1unm
1fuss
fuss1p
1fu√ü
fu√ü1er
1fut
1f√º
f1v
f1w
f1z
ga1bi
g1abr
ga1ch
ga1fl
ga1fu
ga1h
ga1k
gala1d
g1alau
g1alg
gal1la
g1alp
g1alta
g1alu
ga1man
g1amt
g1ana
gang1u
g1ank
g1ansi
g1anst
g1anz
ga1pa
1gard
g1arm
garo1
g1arti
ga1ru
g1arz
gas1al
gas1tu
ga1tab
ga1tr
g1auf
g1aug
g1aus
g1aut
ga1v
ga1w
1g√§
g1√§p
g1√§rz
g1b
g1c
g1di
g1do
g1d√∂
gd1r
gd1t
g1du
g1dy
1gea
1ge√§
1geb
ge1bel
ge1bes
ge1c
1ge1d
1ge1e
1gef
g1eff
1geg
ge1gel
ge1gem
ge1ger
ge1ges
ge1gu
1geh
ge1he
geh1m
g1eif
ge1ir
g1eise
1gej
1ge1k
ge1le
ge1li
gel1im
gel1l
gel1sz
gel1ta
gel1tr
ge1m
g1emp
ge1na
gen1ac
ge1n√§
gend1r
1geni
ge1nis
gen1n
1genom
gen1th
gen1tr
ge1nu
genz1t
1geo
geo1pa
ge1ou
1ge√∂
1gep
1ge1q
ge1ra
1ger√§
ger1d
ge1rei
ge1ret
g1erkl
ger1no
g1ernt
ge1ro
1gerol
ge1r√∂
g1erz√§
ge1s
1gesc
1gese
ges1er
ges1th
1ge1t
g1etap
get1z
g1e1ul
1ge√º
1gew
g1ex
1gez
g1f
g1g
g1h
gh1l
gh1n
gh1w
1gib
gie1be
gie1d
gie1g
gie1h
gie1i
gie1l
gie1m
gie1st
1gie√ü
gie1t
1gif
g1ind
g1inf
g1inh
g1ins
g1int
1gip
g1isel
g1j
g1k
g1lab
g1lag
1glan
1glas
glas1p
1glaub
g1lauf
1gl√§
g1l√§d
g1l√§√ü
g1l√§uf
g1leb
g1lec
g1led
g1leg
g1lein
g1len
g1lese
g1lev
g1li
1glid
1glit
g1lo
glo1k
1glom
g1luc
g1luk
g1lus
1gl√º
g1l√ºg
1gly
g1m
gma1ri
1gnad
1gn√§
g1nel
g1ni
g1not
g1num
gn1z
g1of1
g1oh
go1ma
go1nau
go1p
go1ste
go1tr
g1√∂l
g1p
g1q
1gr
g1radl
g1rah
g1rak
grar1e
g1rau1b
gr√§s1c
g1r√§u
g1rec
g1ref
g1reic
g1reih
g1rein
g1reit
g1rek
g1renn
g1rese
g1ret
g1rev
g1rind
g1ring
g1rinn
gro1c
g1rose
g1rui
g1rum
gs1ac
gs1ad
gs1af
gs1ag
gs1ahn
gs1alb
gs1alm
gs1amb
gs1as
gs1ax
gs1√§
g1sc
gs1e
g1see
g1seil
g1seis
g1seni
gs1i
g1sig
g1sil
g1sit
gs1o
gsof1
g1sol
g1son
g1soz
gs1p
gs1s
gs1tab
g1star
gs1t√§
g1stel
gs1th
g1stir
g1sto
gs1top
gs1tor
gs1tot
gs1tr
gs1tu
g1stun
gs1t√º
gs1u
g1ta
g1t√§
g1tei
g1tenn
g1tep
g1term
g1terr
g1t1h
g1ti
g1to
g1tr
gt1t
g1tu
g1t√º
1guc
g1uf
g1uh
1gum
g1unf
g1ungl
g1uni
g1unk
1guns
g1url
guss1o
gu√ü1
1gut
gut1a
gut1h
gut1t
1g√º
g√ºr1c
g1v
g1w
1gyn
g1z
h1abr
h1abs
ha1bus
h1adle
h1adr
h1aff√§
haf1fl
h1ah
hai1l
ha1kl
h1alar
halb1r
hall1a
halo1
h1alp
h1amt
hanf1
hank1t
ha1nu
h1ap
ha1ph
h1arm.
h1arti
h1a√üe
h1atl
hat1r
hat1tr
h1audi
h1aufm
h1aufs
h1aug
h1aukt
ha1z
h1√§ff
h√§l1c
h√§r1d
h1√§rz
h√§us1c
h1b
h1c
h1d
he1det
he1em
he1eng
he1et
hef1ei
hefe1m
hef1l
1heft
h1eif
h1eig
heim1p
hein1d
hein1t
heits1
h1eiw
1heiz
hel1an
hel1au
hel1ec
hel1la
1hemd
1hemm
h1emp
hen1a
hen1da
hen1et
hen1ta
hen1te
hen1tr
h1ents
hen1z
h1epi
heran1
h1erfo
h1erke
hermo1
h1er√∂
her1ta
h1erz√§
herz1w
hesen1
1hetz
heu1g
1heu1sc
h1f
hfell1
h1g
hgas1
hge1
h1h
hi1di
hie1g
hie1h
hier1i
hik1r
hik1t
hil1a
hilo1
h1imb
h1inf
hin1ge
hin1gl
h1inh
hint1a
hin1z
hip1h
hip1i
hip1o
hip1s
hirm1a
hirn1
hi1th
1hitz
hi1ver
hiv1o
h1j
h1k
h1lad
h1lai
hl1anz
h1las
h1lat
hlau1b
h1laut
h1law
h1lay
h1l√§d
h1l√§nd
hl1√§r
h1l√§s
h1l√§√ü
h1l√§u
hl1c
hl1d
h1leb
h1led
hle1e
hle1l
hlen1n
hl1erg
hl1erw
hle1ta
h1lik√∂
hl1ind
h1lini
h1list
hl1k
hl1l
hl1n
h1loc
hl1op
h1los.
h1losi
hl1se
hl1slo
hl1ta
hl1th
hl1ti
hl1tr
hl1tu
h1luk
h1l√ºf
hl1z
h1mad
hma1ge
h1mak
h1man
hm1ant
h1mar
h1mas
hme1d
hme1e
h1mein
hme1le
hme1li
h1mes
hme1st
hme1ta
hme1te
h1mex
h1mil
h1minz
h1mon
h1mop
h1mot
hm1p
hms1p
h1mul
h1my
h1nami
h1nas
h1nati
hn1√§h
hn1√§r
h1n√§s
hn1c
hn1da
hn1di
hnen1t
hn1ero
hn1g
hn1im
h1niv
hn1n
h1not
hn1ta
hn1ti
hn1to
hn1tr
h1num
hn1unf
hn1z
hoch1
hof1a
hof1l
hof1o
hof1r
ho1g
ho1ha
hol1a
hol1ei
hol1op
hol1s
hol1tr
h1olym
1holz
ho1nad
hon1di
hon1to
ho1on
ho1pa
h1ope
ho1ph
h1oran
h1ord
h1org
hor1ma
hor1me
ho1si
ho1sl
ho1sta
ho1tom
ho1tr
1hou
how1
h1ox
1h√∂
h√∂s1c
h1√∂st
h1p
h1q
hr1ad
hr1ag
h1rah
h1rat
h1r√§u
hr1c
hr1di
h1rech
h1red
h1ref
h1reic
h1reiz
h1rep
hres1
hr1eta
hr1eu
h1rev
hr1int
hr1m
hr1n
h1rog
h1roh
h1rol
h1rou
h1r√∂s
hrs1ac
hrs1of
hr1ta
hr1tu
hrt1un
hr1ums
hr1z
hs1ad
hs1as
h1sc
hs1ec
h1see
h1seg
hs1ehr
h1sei
hs1eie
hsel1l
h1sem
hs1erf
hs1erg
h1seri
hs1erk
hs1erl
hs1ern
h1sess
h1sext
h1si
hs1id
hs1ing
h1so
hs1of
hsof1f
hs1par
hs1pel
hs1per
hs1ph
hs1s
h1sta
hs1tau
h1stec
h1stei
h1stel
hs1th
h1sti
hs1tie
h1sto
hs1tol
hs1tor
h1str
hs1tu
h1stun
hs1u
ht1a
h1tal
h1tanz
h1tas
h1tate
ht1√§
h1t√§n
h1t√§t
ht1ec
ht1eff
hte1g
ht1ehe
h1tei
ht1eim
ht1ein
ht1eis
ht1eke
htel1l
h1tenn
h1tepp
ht1erh
ht1erz
ht1ese
ht1ess
ht1eth
ht1eu
ht1h
h1thes
h1th√º
h1tie
h1til
ht1im
ht1in
h1tip
h1tis
h1tit
h1to
ht1ob
htod1
ht1oly
ht1or
h1t√∂p
h1tr
ht1rak
ht1ras
ht1rat
ht1rau
ht1rec
ht1rei
ht1rel
ht1res
ht1rin
ht1ro
hts1o
ht1t
h1tue
h1tum
h1tur
ht1urs
h1tus
h1tut
h1t√º
ht1zen
ht1zer
ht1zin
hub1a
hub1ei
hub1en
hub1l
hub1r
huh1a
huh1i
huh1m
h1uhu
huk1i
huko1
hul1a
hul1ei
hul1er
hul1in
hul1k
hul1l
hul1s
hul1tu
hul1z
1humo
h1una
h1uni
h√ºpp1
h1v
h1weib
h1weih
1hym
1hyp
h1z
ia1ber
ia1da
ia1di
ia1do
ia1e
ia1f
ia1g
ia1h
ia1j
ia1ka
ia1kl
i1akt
ial1a
ial1d
ial1et
i1alia
ial1k
ial1l
ia1lo
ial1se
ial1t
ial1u
ial1z
i1amp
ian1eb
ia1net
i1ang
ians1p
ianz1t
ia1o
ia1p
ia1q
i1ara
ia1ro
ia1s
i1ath
ia1the
ia1tre
ia1tro
i1au
iaus1
ia1vi
ia1w
ia1z
i1√§m
i1√§p
ib1art
ib1auf
i1bea
i1bec
ib1eig
ib1eis
i1bek
iben1a
ib1ep
i1beru
i1besi
i1bez
ibik1
i1bla
i1bl√§
i1blo
i1blu
ib1rau
ib1ren
ib1unk
ibus1c
i1car.
ice1
ich1a
ich1√§
ich1ei
ich1l
i1chlo
ich1m
ich1ni
ich1ra
ich1ru
ichs1i
ich1w
ic1in
ick1sk
i1cl
i1dac
id1an
id1au
1idee
ide1li
ide1me
i1denk
ideo1
ide1r√∂
i1dik
i1dim
1idio
ido1b
i1dot
id1rin
ids1p
id1t
1idy
ieb1l
ieb1re
ie1e
ief1ak
ief1an
ief1ei
ief1f
ief1l
ie1gi
ieg1r
iegs1c
ieh1in
ieh1m
ieh1n
i1ei
ie1ind
ie1ku
iel1a
iel1d
iel1ec
ie1lie
iel1li
iel1se
iel1sz
iel1ta
iel1tr
iel1z
ie1mi
ie1mo
ien1ag
ie1nam
ie1nat
ien1da
ien1eb
ien1k
ien1tr
ien1zi
ie1o
iep1to
ie1q
ie1rei
ie1rie
ier1ta
ier1ti
ie1str
iet1a
ie1tab
iet1ho
i1ethy
ie1tie
iet1√∂s
iet1ru
iet1z
ie1um
ie1un
ieu1s
i1ex
if1ab
if1ar
if1au
i1fed
if1ef
i1fei
if1erg
if1erh
iffs1
if1l
i1fl√§
i1fl√º
if1n
i1fra
i1fre
ift1a
ift1ri
ift1sz
i1fu
iga1g
ig1art
iga1s
ig1att
ig1d
ige1g
i1gei
ig1ein
i1gel
i1gema
i1geno
ig1erz
i1gesp
i1gil
i1gle
i1gon
ig1rei
ig1so
igs1to
ig1str
i1gy
i1h
ih1am
ihe1e
ih1elt
ihe1re
ih1l
ih1m
ih1n
ih1r
ih1ti
ih1um.
ih1w
i1im
i1in
i1j
1ijs
ik1ak
ik1amt
ik1ang
ik1ano
ik1art
ika1sc
ik1att
ik1au
ik1√§r
ik1ei
ik1ens
ik1ere
ik1erf
ik1erh
ik1erl
ik1eta
i1kic
ik1in
ik1l
i1kl√§
i1klu
ik1n
iko1b
ik1off
iko1p
ik1ori
ikot1t
ik1q
ik1r√§
ik1res
ikro1
ik1s
ik1tab
ikt1re
ik1t√º
ik1uh
il1ac
i1lag
il1ak
il1ama
il1ans
i1las
il1asp
il1au
i1laub
il1√§r
il1dat
il1di
ild1o
i1leb
il1ec
i1lei
il1ein
il1el
ile1li
ile1na
il1ent
il1erf
il1erg
il1erh
il1err
i1leu
i1lev
ilf1le
ilf1re
ilfs1
ilien1
i1lif
ilig1a
il1ind
i1link
il1ins
il1ipp
il1k
il1lei
il1lu
ilm1au
ilm1ei
il1n
il1ob
ilo1k
il1or
ilo1w
il1ta
il1th
il1tie
il1ur
ilz1er
i1mac
ima1d
i1mann
im1arm
ima1s
ima1z
im1d
i1mei
im1ein
im1erf
im1erz
ime1sh
im1ind
im1inf
im1ins
imi1se
im1mis
1immo
im1n
im1op
1imp
im1pi
im1pu
im1ti
im1tu
i1my
in1ac
in1ad
in1ae
ina1f
in1am
in1ap
ina1sc
in1√§h
in1c
in1dac
in1dar
1index
in1do
in1d√∂
1indus
in1eng
in1erk
in1eu
1info.
1infos
ing1af
ing1ag
ing1al
ing1ar
ing1at
1inhab
ini1b
ini1kl
ini1se
in1it
1inkas
inks1t
1innta
ino1b
ino1n
in1or
ino1s
ino1t
ino1w
in1√∂d
1insuf
in1ta
1integ
in1th
in1tie
in1to
in1tr
in1u
in1zem
io1c
i1od
io1da
io1f
io1g
io1h
io1k
io1la
io1lei
io1m
ion1d
ionen1
io1nik
ions1
ion1t
io1p
i1opf
io1q
ior1c
io1rh
io1sc
io1sh
io1st
io1sz
io1ta
io1tel
ioten1
io1to
io1tr
io1w
i1ox
i√∂n1
i1pa
i1p√§
ip1ein
ipo1c
i1pr
i1rad
i1rau
i1raz
i1r√§
ir1√§h
i1rei
ire1t
irgs1
irm1ag
irm1ei
irm1o
i1roc
i1roh
1iron
i1r√∂
irts1t
irus1
is1amt
isan1g
is1√§n
isch1l
ise1c
ise1d
ise1e
ise1g
i1segl
i1seme
isen1a
isen1k
is1erg
is1erm
is1ess
is1id
i1siev
i1sil
i1sim
i1sinn
is1of
1isol
is1org
1isot
is1pa
is1ph
is1pic
is1pu
iss1ac
is1sit
is1soc
is1sor
is1soz
iss1tr
iss1um
i1stel
is1th
i1stic
i1stil
ist√∂r1
i1stro
is1tur
i1suf
i1suk
isum1
i√ü1ers
it1ab.
it1abs
ital1l
it1alt
it1an
it1apo
it1are
it1art
it1au
i1tauc
it1√§s
it1eff
it1ei
i1teic
ite1li
iten1z
it1ess
i1tetr
it1ex
it1hil
it1in
it1iss
ito1c
i1tod
it1of
i1tonu
it1op
i1tr
it1rad
it1raf
it1ras
it1rau
it1r√§u
it1re
it1rom
it1ruc
it1run
its1ag
its1e
itser1
its1o
it1the
it1uh
it1ums
i1t√ºl
ity1
itz1w
i1u
ium1a
ium1i
ius1
i1√º
iv1ad
iv1ak
ival1l
iv1am
iv1an
iv1ef
iv1elt
iv1ene
iv1ent
iv1erf
iv1erh
iv1erl
iv1ex
ivil1l
iv1t
iv1ur
i1w
ix1ta
iz1ag
iz1ap
iz1au
ize1c
izei1c
izei1g
iz1erl
ize1t
iz1th
iz1w
ja1j
ja1sc
ja1so
ja1st
ja1ti
1j√§
j√§h1l
jekt1r
jet1a
jet1h
jet1r
jet1u
job1
jung1s
jute1
k1aa
ka1ar
k1abo
k1abs
k1abt
k1ada
k1adm
k1adr
ka1fe
ka1fl
ka1fr
ka1ga
ka1ha
kai1sc
ka1kl
kal1d
kalk1a
kal1l√§
kal1lo
k1allt
ka1log
kal1os
kal1se
ka1mei
1kamer
1kamm
1kana
kan1as
1kanon
k1ans
k1anth
kanz1t
kao1
1kap
ka1rei
k1arm
k1arti
kar1uf
ka1so
kat1an
kauf1o
k1aus
1k√§
k1√§h
k1√§mi
k1√§nd
k√§s1c
k1b
kbe1
k1c
k1d
ke1b
k1ec
k1ef
1keg
1keh
ke1her
k1eic
k1eig
k1ein
ke1ind
k1eis
keits1
kel1a
kel1er
kel1la
kel1li
kel1o
kel1se
kel1sk
kel1ta
kel1tr
kel1z
k1emp
ken1da
1kenn
ken1ni
k1entg
ken1th
ken1ti
k1entl
ken1tr
k1ents
ken1z
ke1o
ker1√§
k1ero
ker1oo
k1erz.
k1erzi
1ke√ü
ket1a
ket1eb
kett1h
1keu
ke1up
k1ex
k1f
k1g
kge1
k1h
ki1a
ki1be
ki1bu
ki1da
k1ide
ki1di
ki1f
ki1k
1kil
ki1la
ki1l√§
ki1le
ki1li
kilo1
ki1ma
ki1me
ki1mi
ki1nat
k1indi
k1indu
1kine
kini1
kino1
k1inse
k1inst
k1int
ki1or
ki1pi
1kir
ki1ra
ki1re
ki1si
ki1v
ki1ze
k1j
k1k
k1lac
k1lad
1klar
k1last
klau1d
k1l√§d
k1led
k1leg
k1leit
k1leng
1klet
k1leu
k1lie
1klim
k1liz
k1loc
klo1sc
k1lux
k1l√ºc
k1m
1kn
knie1g
k1nor
k1nov
k1num
k1nus
1ko
k1oas
kob1la
k1ofe
ko1g
ko1hab
ko1ki
ko1le
kolk1
kon1d
ko1ph
k1orc
korn1a
korn1√§
ko1sc
ko1sin
kos1p
ko1tr
k1ou
k1ox
1k√∂
k1√∂l
k1p
k1qua
1kr
k1rad
k1rah
k1rats
k1r√§um
k1real
k1rec
k1ref
k1reic
k1reif
k1reih
kre1mi
k1resu
k1rev
k1rh
k1ries
k1risi
kro1ph
kro1sc
k1rou
ks1amt
ks1√§l
k1sc
ks1eb
ks1ec
ks1ei
k1seid
k1sel
k1seq
ks1er
k1seri
k1si
ks1id
ks1in
ks1is
k1son
ks1or
ks1pa
ks1ph
ks1s
k1st
ks1tal
ks1tie
ks1tis
ks1tor
ks1tum
ks1tur
ks1u
kt1abs
kt1ad
kt1akt
kt1am
kt1an
kt1ar
k1tas
kt1au
k1t√§
kt1√§u
k1tei
kt1ein
kte1li
kten1e
kt1ent
kt1erg
kt1erh
kte1ru
kt1h
kt1ing
kt1ini
k1tit
k1toc
kt1of1
kto1l
k1tran
kt1ras
kt1rau
kt1res
ktro1s
kt1run
kt1s
kts1o
kt1t
kt1ums
ktur1t
kt1z
1kug
k1uhr
1kunf
kunst1
k1up.
1kur
kur1m
kurs1c
k1urt
kus1ta
1k√º
k1v
k1w
ky1li
k1z
l1ab
l1ada
l1adl
l1adr
1ladu
lag1l
lag1ob
lais1t
la1kl
lak1tu
l1al
lamm1a
1lammf
l1amt
l1anal
1land
lang1s
l1ann
l1anp
l1ans√§
lanz1w
l1apf
l1apo
lar1an
lar1ei
l1art
lar1th
la1ru
1la√ü
la√ü1th
lat1ra
latt1r
laub1r
1laufb
1laug
lau1gl
lau1h
lau1ma
1laun
lau1ta
l√§1a
l1√§hn
l1√§mt
l1√§rz
l√§s1c
l1b
lbau1c
lb1eta
lb1id
lb1ins
lb1li
lb1rea
lb1uf
l1ca
lch1le
lch1li
lch1m
lch1n
lch1ob
lch1r
lch1s
lch1w
l1cl
ldab1
l1dac
ld1ah
ld1ak
ld1al
l1dam
ld1an1
ld1ari
ld1arm
ld1au
ld1√§r
l1del
l1dem
ld1emi
ld1erp
ld1ess
l1dez
l1dia
l1d1id
l1dien
l1dif
l1dis
ld1n
l1don
l1dor
ld1ori
l1d√∂
ld1r
ld1t
l1due
ld1um
lear1t
1leas
leb1re
le1die
l1eff
leg1ab
leg1as
lege1b
1leh
le1her
leif1a
l1eig
lei1l
l1einn
l1elf
lel1tr
lem1au
lem1o
len1a
len1ed
len1ta
len1tr
l1enzy
l1epi
1lept
ler1√§
l1erfo
l1erke
l1er√∂
l1erz
l1esel
le1sh
le1sk
le1sti
le1sto
le1str
le1uf
1leuk
l1eul
1leut
lex1t
l1f
lf1ec
lfe1e
lfe1g
lfe1le
lfe1m
lfe1na
lf1erl
lf1f
lf1led
lf1lo
lfs1ti
lf1tu
l1g
lgo1l
lgs1t
l1h
li1ak
1lic
l1ido
li1don
1lied
lien1a
lies1c
li1kli
likt1o
li1lau
li1lit
lima1c
lima1l
l1imb
1limo
li1mor
l1inf
lings1
l1inh
l1inj
l1inst
l1insu
l1insz
l1int
l1inv
li1pf
1liq
li1rem
l1isl
1lith
lit1r
lit1s
lium1
l1j
l1ka
lk1alp
l1kee
l1kei
l1kess
l1ket
l1ki
l1kl
lk1roc
lk1ru
lks1
lk1t√º
ll1aff
ll1am
ll1anz
ll1arm
ll1aus
ll1√§r
ll1c
ll1d
l1lec
ll1ech
lle1d
ll1ef
l1leic
l1leid
ll1eim
ller1d
ll1ex
l1lib
l1lief
ll1ind
l1litz
l1lize
ll1k
ll1l
ll1ob
ll1ol
ll1opf
ll1or
ll1ou
ll1se
lls1es
ll1sk
ll1ta
ll1th
ll1ti
ll1tr
ll1tu
ll1urs
ll1z
l1m
lm1ad
lm1aka
lm1am
lm1apf
lm1art
lm√§h1
lm1√§st
lm1c
lm1d
lm1ef
lm1ep
lm1erl
lm1erz
lm1id
lm1ind
lm1ins
lm1m
lm1n
lm1orc
lm1p
lm1th
lm1ti
lm1tu
l1na
l1n√§
l1ne
l1no
l1nu
l1n√º
1lob.
l1obl
l1of
lof1f
1logi
1logo
l1ohr
1lok
lok1r
lo1la
l1oly
lo1mu
l1onk
lon1o
lo1pa
l1ope
1lorb
l1orc
l1ord
l1org
lor1m
1lose
lo1shi
los1to
los1tr
lot1a
lo1t√§
lo1tr
lo1wi
1loy
1l√∂
l1√∂hr
l1√∂l
l1p
lp1ho
lp1tr
l1q
l1r
lre1s
ls1ad
ls1amb
ls1√§us
l1sc
ls1eb
ls1ec
l1see
l1seg
l1sei
l1sel
ls1eli
ls1emb
ls1er
ls1eta
l1sex
l1shi
l1si
ls1id
l1so
l1s√∂
ls1ph
ls1s
l1sta
ls1tas
l1stec
l1stei
l1stel
l1sti
ls1tis
l1sto
ls1tor
l1str
l1stu
l1su
ls1um
lt1abs
lta1d
l1tal.
l1tale
lt1alg
lt1am
l1tann
l1tanz
lt1ara
l1tas
lt1ato
lt1au
l1t√§
lt1eh
l1tei
lt1eig
lt1ein
lt1eis
l1tel
lt1elt
lte1mi
l1temp
l1tenn
l1teno
l1term
lt1esk
l1teu
lt1h
l1tic
lti1k
lti1l
lti1na
lti1r
lti1t
l1to
lt1of
lt1ori
l1t√∂
lt1√∂l
lt1√∂s
lt1√∂t
ltra1l
l1trap
lt1r√§u
lt1re
lt1rol
lt1r√∂
lt1ruc
l1tr√º
lt1so
lt1t
l1tug
lt1uh
lt1um
ltur1m
l1t√º
lt1z
lub1
lu1do
1luf
l1ufe
luft1
lug1a
lug1eb
lug1l
lug1n
lug1r
lug1se
l1uh
lu1he
l1umd
lumen1
l1ums
l1umw
l1una
l1unf
l1uni
l1uns
lur1an
l1urn
l1ur1t
luss1c
luss1p
1lust
lust1o
lus1u
lu√ü1
lut1a
lut1eg
lut1of
lut1or
lut1r
lut1t
lut1z
l√ºh1l
l1v
l1w
1ly
ly1a
ly1ch
ly1et
ly1l
ly1mo
ly1n
ly1th
ly1u
ly1z
lz1ag
lz1ap
lz1√§p
lz1√§r
l1zel
lz1erh
l1zi
lz1id
lz1tep
lz1th
lz1ti
lz1ufe
lz1ur
lz1w
m1ab
ma1ber
ma1bes
ma1bi
ma1bli
ma1bu
1mache
m1adm
ma1en
ma1er
ma1fe
ma1fr
ma1fu
1mag
ma1gar
m1agg
ma1gl
m1ago
ma1gor
1mah
ma1he
mai1d
mai1v
1maj
ma1kar
ma1kat
m1akt
mal1ak
mal1at
mal1da
mal1k
mal1li
mal1ta
mal1ut
1manag
m1anal
m1anat
m1angr
1mann.
1man√∂
m1anza
1mark
1marx
m1arz
1ma√ü
m1atel
mat1tr
1maue
m1auf
1maul
1maur
ma1v
ma1w
may1t
1m√§
m1√§hn
m1√§nd
m1√§p
m√§us1c
m1b
mben1t
mble1i
mbol1l
m1ca
mc1ca
m1ch
m1cr
m1da
md1as
md1ato
md1√§r
m1def
md1erl
m1di
m1do
md1t
md1um
me1b
1med
me1ef
mee1m
me1ene
mee1ru
m1eff
me1g
mega1s
1meh
m1eif
m1eig
1meil
me1k
1meld
mel1ta
mel1tr
me1me
m1emis
m1emp
m1emu
men1ac
men1k
men1tr
men1z
me1ou
m1epi
me1q
me1rel
m1erne
mer1th
1mess
mess1o
me1sto
me1sz
1me√ü1
me√üun1
1met
me1tar
me1tau
me1tim
m1ex
mex1t
m1f
m1g
mge1l
mge1r
m1h
mi1ab
mi1ano
mi1ar
mic1e
mie1b
mie1c
mie1s
1migr
mik1an
milch1
mi1leg
1mill
mi1ma
m1im1m
m1indu
min1ge
ming1s
m1inse
1min√º
mi1p
mi1q
mi1re
mi1sei
mi1so
mi1sto
mi1str
1mi√ü
mi√ü1e
1mit
mit1ak
mit1ed
mit1er
mit1h
mit1s
mit1ta
mit1u
mit1z
1mix
mi1ze
m1j
m1k
m1l
ml1c
m1ma
mma1a
mm1ak
mm1al
mm1ans
mm1anz
mm1art
mma1se
mma1st
mm1au
mm1√§u
mm1d
mm1ef
mm1ein
mmel1l
m1merz
mm1eu
mm1id
mmi1m
mm1inb
mm1inf
mm1inh
mm1ins
mm1int
mmi1r
mmi1sc
mmi1st
mm1m
mm1na
m1mo
mm1p
mm1ti
m1mu
mmun1z
m1n√§
m1ni
mni1p
m1no
m1n√∂
m1nu
1mob
1mod
mode1s
m1of
mog1al
1moh
1mom
mo1ma
mo1nau
mond1r
mo1ny
1moo
mo1pa
m1ope
mo1ph
1mora
mord1a
mo1tr
mo1w
m1ox
1m√∂
m1√∂l
m1√∂rt
m1pa
m1p√§
mp1ene
mpf1ef
mpf1or
mp1hos
mpo1m
m1pr
mp1str
mp1ta
m1q
m1r
mre1b
m1s
ms1as
ms1√§n
ms1ed
ms1ef
ms1ene
ms1erf
ms1ori
ms1ped
ms1s
ms1tal
ms1ums
m1ta
mt1ab
mt1ak
mt1ar
m1t√§
m1tei
mt1ein
mt1elt
m1temp
m1tep
mt1erf
mt1erg
mt1erl
mt1ers
mt1ert
mt1eta
mt1eu
mt1h
mt1in
m1to
m1t√∂
mt1√∂l
mt1√∂s
m1tr
mt1ro
mts1e
mt1ska
mt1sor
mt1t
mt1um
mt1urt
m1t√º
mt1z
m1uh
multi1
m1ums
mums1p
m1unf
mur1uf
mus1a
1musc
1musi
mus1o
mus1to
1m√º
m√ºhl1a
m1v
mvoll1
m1w
my1kl
my1la
m1z
n1ab
na1bes
nab1u
1nac
n1adl
n1adm
n1adr
na1es
n1af
na1gar
n1agg
n1agi
1nah
nah1a
n1ahn
n1aho
n1air
n1ak
na1kul
na1kun
nal1a
nal1d
nal1et
nal1ex
nal1ku
nal1la
nal1s
nal1tr
1name.
1namen
n1amer
na1mn
n1amp
n1amt
n1an
nan1eu
nan1g
1nann
nanz1t
na1ot
1napf
n1apfe
n1ar
nar1a
na1rei
na1rin
na1sit
nass1c
1na√ü
nats1
1natu
n1au
nau1d
nau1ma
nau1sc
na1w
1naz
nazi1t
1n√§c
n1√§f
1n√§g
1n√§he
n1√§hn
n1√§m
n1√§n
n√§r1t
n1√§s
1n√§√ü
n1b
nbe1n
n1ca
n1cel
nch1m
n1cl
n1cr
n1cu
nda1f
n1dah
nd1ak
nda1ma
nd1arr
n1dars
n1das
nd1att
nd1au
nda1v
nd1c
n1deal
nde1e
n1degu
ndel1l
n1dia.
n1di√§
n1dif
n1dik
n1dim
n1dio
n1dit
n1diz
nd1n
n1dog
n1don
nd1or
ndo1st
nd1rat
nd1rau
nd1re
nd1rif
nd1r√∂
nd1run
nd1tep
nd1th
nd1ti
nd1tr
n1dua
1neb
ne1ber
ne1bes
n1ebn
1nece
1neckt
ne1di
nee1n
nee1r
nee1t
n1ef
n1egg
n1ego
1negr
1neh
n1ehe
ne1her
n1ehr
ne1hu
n1ei
nein1d
n1eks
n1ele
ne1lie
ne1lin
1nelk
n1emb
n1emi
n1emp
n1ems
nen1a
n1endb
n1endd
n1endf
n1endg
n1endh
n1endk
n1endl
n1endp
n1endt
n1endw
nen1eb
nen1i
nen1k
1nenn
n1entb
n1entl
n1ents
nen1z
neo1
ner1de
n1erf
n1erg
n1erh
n1erl√∂
n1ermi
n1ern√§
n1ernt
n1err
n1ersa
1nerv
n1erz
nes1ev
ne1sh
ne1ska
nes1of
nes1or
nes1pa
n1essi
ne1sta
1neste
n1estr
ne√ü1
net1ak
ne1tal
net1an
n1etat
n1eth
ne1tor
n1etu
1netz
netz1i
1neu
neu1c
neu1d
neu1f
neu1g
neu1k
neu1l
n1eup
neu1s
neu1te
n1ex
nex1t
n1f
nf1ak
nf1f
nfo1s
nfra1t
nft1r
nf1u
n1ga
ng1ac
ng1ad
ng1ak
ng1am
ng1and
ng1ant
ng1av
ng1√§l
ng1d
n1gec
n1gei
ng1ein
n1gele
n1gem
ng1erg
n1ges
ngg1s
ng1id
n1gin
ng1lac
ng1l√§n
n1gloc
ng1ne
ng1no
ng1ope
ng1opf
ng1or
n1got
ng1rai
ng1rat
ng1roc
n1gy
n1h
ni1bi
ni1cen
ni1cr
n1id
nie1b
nie1c
1nied
1nies
1nie√ü
nig1a
n1igel
ni1go
nig1r
ni1kli
nik1r
nik1t
ni1la
ni1mo
n1in
nin1al
nin1de
ni1ra
nis1e
1nish
nis1in
1nisn
nis1or
nis1p
1niss
nis1sk
nis1sz
nis1to
nis1u
1ni√ü
1nitr
nium1
ni1v
1nixe
n1j
n1ka
nk1abr
nk1ad
nk1ang
nk1apf
nk1√§p
nke1d
nk1ei.
n1keil
n1kell
n1ket
n1ki
nk1inh
nk1ins
nkkom1
n1kl
nk1lis
nk1lit
nk1nes
nk1nis
nk1ope
nk1ori
nk1ort
nk1r√§t
nk1ro
nk1sen
nk1sz
nk1tel
nkt1it
nk1tor
nk1tr
nk1t√º
n1ku
nk1ums
n1l
n1m
n1na
nn1all
nna1ma
n1n√§
nn√§1l
nn1c
nn1d
n1neig
n1nek
nnes1e
n1nest
n1net
n1nex
nn1g
n1nic
nni1l
n1nim
n1niv
nn1n
n1no
nn1obl
nn1op
nn1ori
n1n√∂
nns1pe
nn1ta
nn1tel
nn1tr
nn1uf
n1num
nn1unf
nn1ur
n1n√º
n1nym
nn1z
n1obh
n1obs
no1bu
n1of
nof1f
no1g
n1oh
no1he
no1k
n1okk
no1la
nol1c
no1li
n1oly
1nom
no1man
nomie1
no1mu
n1onk
no1pa
no1ped
no1phi
n1opp
n1ops
no1q
nord1r
1norm
n1ort
no1sc
no1sh
n1osth
not1ei
no1wa
n1ox
n1√∂k
n1√∂l
1n√∂t
n1p
n1q
n1r
nre1sz
n1s
ns1ad
ns1agi
ns1√§n
ns1√§us
ns1eb
nseh1r
ns1eke
ns1erf
ns1erg
ns1erk
ns1er√∂
ns1ers
ns1erw
ns1eu
ns1id
ns1od
ns1of
nsof1f
nsor1c
ns1ph
ns1s
nst1ak
nst1ut
ns1un
ns1urs
nta1c
n1tai
n1tam
nt1ant
n1tanz
n1tap
nt1ark
nt1art
n1tau
n1t√§
nt1√§m
nt1√§u
nt1eb
nte1e
n1tege
nt1eh
nte1he
n1tei
nt1ein
n1tek
n1tele
nte1me
n1temp
n1tend
n1tep
nt1ess
n1the
nt1ho
nti1d
nti1kl
nti1ma
ntim1p
n1tint
n1tip
nti1pe
nti1z
n1t√∂
n1trak
nt1rea
nt1rec
n1trio
n1trop
n1tr√∂
nt1so
nt1t
n1tu
n1t√º
nt1z
nuar1
1nud
1nug
n1uh
nu1hi
1nuk
1nul
num1a
n1umb
1numm
n1ums
n1une
n1ungl
n1uni
nur1
nu1re
nu1skr
nus1t
1nu√ü1
1nut
nut1a
1n√ºc
n√º1fu
n√º1ges
n√ºr1c
1n√ºs
1n√º√ü
1n√ºt
n1v
n1w
ny1r
nz1ag
nz1al
nz1au
nz1√§r
n1zec
n1zent
nzen1z
n1zep
nz1erh
nz1erl
n1zerr
nze1sk
nz1eta
nz1id
n1zif
nzin1g
nz1ini
nz1int
n1ziv
nz1th
nz1ti
nz1wa
nz1w√§
nz1wu
nz1z
o1a
oa1in
oak1l
o1√§
obe1b
o1bec
o1befe
ob1ein
1oberf
o1bev
o1bit
ob1ite
1obj
o1bl
ob1lei
ob1li
ob1or
ob1rei
o1by
o1ce
och1a
ochan1
och1ec
och1ei
och1l
och1m
och1n
och1o
och1r
och1s
och1w
ock1sz
o1cl
o1cr
o1dar
oden1e
o1derm
o1dia
od1tr
o1du
o1dy
o1e
of1ag
ofa1l
ofa1m
of1au
of1√§r
of1eb
of1ec
of1ed
o1fee
of1ei
of1erb
of1et
of1eun
of1fi
off1in
1offiz
off1l
off1r
o1fi
ofi1b
ofi1g
ofi1k
ofi1s
o1fl
of1le
of1li
o1fr
of1r√§
ofs1
of1th
o1fu
og1ab
og1ang
og1ei
ogel1d
ogel1i
ogen1t
o1glo
o1gn
og1ori
ogs1
og1si
oh1alk
o1h√§
oh1eis
oh1ert
oh1erz
o1hi
ohl1a
ohle1b
ohle1c
ohl1ei
oh1lo
ohl1or
oh1ma
ohn1ac
ohn1d
1ohnm
ohn1o
ohol1e
ohol1t
oh1op
oh1√∂l
ohr1a
oh1s
oh1ta
oh1w
o1hy
o1im
o1in
oin1de
oin1g
oi1th
o1j
oja1m
okal1l
o1kl
ok1lau
ok1l√§
oko1ri
oks1p
o1kul
o1lal
ol1ant
olar1m
o1l√§
ol1√§t
old1am
o1leb
ol1ef
ol1eie
ol1eis
ol1exz
olge1g
olg1r
olien1
o1lif
o1lim
olk1re
oll1ac
oll1ak
oll1ec
oll1ov
o1lo
olo1k
olo1p
ol1ort
ol1th
ol1tu
oly1ph
olz1a
o1mac
om1all
om1art
omaso1
om1asy
oma1th
om1au
om1d
om1ebe
o1mec
om1ef
om1ei
om1erh
ome1ru
om1erz
omiet1
o1mil
o1mim
om1ind
om1ing
om1ins
om1mi
om1n
o1mo
om1oa
omo1g
om1org
om1ori
om1pe
om1pf
om1ph
om1th
o1mus
o1mut
o1my
onage1
onal1l
onal1t
onal1z
on1ap
onas1
o1nav
on1√§h
on1ch
on1do
one1h
on1erb
on1erd
on1er√∂
on1ers
on1ge
ong1s
oni1fe
1onke
on1ker
on1nu
ono1c
on1oke
o1non
on1ope
on1orc
ono1s
ono1t
ons1a
ons1p
on1tin
on1tra
ont1ri
1ony
on1z
oo1be
oo1h
ool1c
o1op
oo1pa
o1or
oot1a
oot1ei
o1√∂
opa1de
op1akt
o1pan
opa1p
opa1ra
opa1re
o1park
opa1sc
opa1st
opa1v
opa1ze
o1pec
op1ef
o1pek
1opera
o1pf√§
opf1la
op1fl√º
o1pit
op1lag
op1le
op1li
1oppo
o1pr
op1res
1opsi
op1so
op1sz
1opt
op1th
or1a
o1raf
ora1g
1orake
orama1
ora1sc
or1√§nd
or1√§t
or1cha
ord1am
ord1ir
1ordn
o1rec
or1eck
o1red
or1eff
o1rek
o1rep
or1er
orer1i
or1eth
or1eu
ork1ar
ork1s
orno1
or1ob
or1oly
o1rom
or1ope
or1opf
o1rou
ort1ak
ort1ev
ort1um
or1uh
or1un
or1z
os1ad
osa1mu
osa1r
ose1g
os1ei
ose1in
os1erk
o1sex
o1sho
osin1g
o1sit.
o1sk
1osm
o1so
osol1
os1pec
oss1ac
oss1or
oss1p
oss1t
ost1a
ost1ei
ost1or
ost1r√§
ost1re
ost1uf
ost1un
os1um
o1sze
o√ü1el
o√ü1enk
o√ü1enz
o√ü1ere
o√üof1
o√ü1t
ot1abi
ot1ah
ot1ant
o1tap
ot1ast
ot1au
ot1√§
o1teg
ot1eib
ot1eic
ot1eis
o1tek
otel1a
ot1emi
otem1p
o1terr
ot1erw
o1tes
o1th
ot1hel
ot1hi
ot1hos
ot1im
oto1b
oto1c
oto1l
ot1opf
oto1s
oto1t
ot1√∂
o1tra
ot1rat
ot1re
o1tri
ot1rin
ot1roc
ots1o
ots1p
ott1a
ottes1
ot1tra
ott1re
ot1tru
o1tub
ot1url
o1t√º
o1uh
o1um
o1unds
o1√º
o1v
ove1s
o1war
o1wat
o1w√§
o1wec
o1wo
ow1t
ox1l
ox1t
1oxy
oy1s
o1z
1ozea
ozon1a
√∂ben1
1√∂du
1√∂f
√∂f1l
√∂gens1
√∂g1l
√∂hen1e
√∂ko1
1√∂l.
√∂l1a
√∂l1ei
√∂l1em
√∂lf1ei
√∂l1in
√∂lk1le
√∂ll1an
√∂l1l√§
1√∂lm
√∂l1s
√∂l1ta
√∂l1tep
√∂l1tu
1√∂lu
√∂n1d
√∂ne1b
√∂n1g
√∂n1ta
√∂o1
√∂r1a
√∂rb1l
√∂rden1
√∂r1di
√∂r1ec
√∂r1ei
√∂r1el
√∂r1em
√∂r1ene
√∂r1ere
√∂rf1l
√∂r1ma
√∂r1me
√∂r1o
√∂r1tu
√∂r1une
√∂sch1m
√∂se1g
√∂s1ei
√∂so1
√∂ss1c
√∂st1a
√∂t1a
√∂ten1e
√∂t1r
1paa
pa1be
pa1cen
1padd
p1adr
pa1fe
pa1fr
1pag
pa1h
1pak
pa1ka
pa1kl
1pala
1pal√§
1pale
pa1lig
palm1o
pa1m
pan1at
pan1de
1pap
1parc
pa1rek
1park.
1parke
park1s
par1ne
1paro
1partn
1party
par1z
pa1sem
pat1a
1path
1patr
1pau
p1auf
pa1ve
pa1w
1p√§c
1p√§d
p√§d1er
1p√§r
1p√§s
p√§t1eh
p√§t1h
p1b
p1c
p1d
p1eb
pech1e
p1eff
1peit
pel1a
pel1er
1pell.
pel1la
pel1l√§
pel1ta
pel1tr
pe1m
pen1ed
pen1it
pen1k
pen1o
1pensu
pen1te
pen1tr
pen1z
1pep
per1√§
per1d
1perio
1perlh
1per√º
1pet
petri1
pf1ab
pf1ai
pf1ak
pf1am
pf1ans
pf1are
pf1au
pf1√§r
pf1√§u
pf1eim
pf1ein
pf1ep
pf1f
p1fie
pf1inn
pf1ins
p1fit
pf1lam
pf1l√§
pf1lei
pf1lo
pf1n
pf1om
pf1ra
pf1re
pf1ris
1pfro
pf1th
pf1ti
pf1tu
p1g
1phag
1phas
p1hau
p1hei
phen1d
phen1e
ph1ers
phik1a
ph1m
ph1ni
1pho
pho1m
p1hop
1phtho
p1h√º
1phy
pia1b
pia1l
pia1m
pia1r
pia1t
piel1l
1pil
ping1s
ping1t
1pinse
1pip
pipe1
1pix
piz1in
p1j
p1k
pkur1
1pl
p1lab
plan1z
ple1c
ply1
p1m
p1na
p1n√§
p1nu
1po
po1b
po1da
po1g
pol1au
pol1li
po1man
po1ob
pop1ak
pop1ar
po1ph
po1rau
po1rei
po1str
pot1ar
pott1r
pot1u
poxi1
p1pa
pp1ab
pp1au
ppe1e
ppe1g
pp1ein
ppel1z
ppen1t
pp1f
pp1h
pp1lad
pp1l√§
pp1lei
pp1oh
pp1p
p1pr
pp1ra
pp1ren
pp1se
pp1si
pp1ta
pp1tel
pp1ti
pp1tr
ppy1
1prak
1prax
1pr√§d
1pr√§g
1pr√§l
1pr√§m
1pr√§s
pr√§1t
1pred
pree1
1prei
1pres
1pre√ü
1prinz
prit1e
1pro
pro1d
pro1m
pro1p
pro1st
1pr√ºf
p1sc
p1see
p1sh
ps1id
ps1pu
p1sta
p1stea
p1stel
p1sti
1psy
pt1a
p1t√§
pt1ec
pt1ei
pt1eng
pt1ent
pt1ep
pt1erw
pt1erz
pt1h
p1tief
pt1in
1pto
pt1r
pt1s
pt1t
pt1um
pt1urs
1pty
pt1z
1pub
1pud
1puf
p1uh
puls1t
1pulv
1pum
pump1l
1pun
1pup
pur1m
1p√ºf
p√ºl1l
p1v
p1w
py1d
py1e
1pyl
py1s
p1z
qi1g
r1aa
ra1ar
r1ab
ra1bit
r1acet
1radar
1radf
1radh
radio1
rad1t
raf1er
raf1r
ra1gle
ra1her
1rahm
ra1ho
ra1kab
ra1kal
ra1kla
ral1de
ra1lex
ra1lib
ra1log
ral1th
ra1man
ra1mar
ra1mee
ra1mil
r1amt
ra1mu
1randi
ra1net
r1anm
ra1no
r1anp
ran1ta
r1anth
ra1per
r1aq
r1ar
rar1a
rar1d
ra1rei
rar1in
ra1ro
ra1sed
ra1sig
rat1a
1raub.
rau1ga
1raum
raum1i
1raup
1rausc
raxis1
r1axt
r√§chs1
1r√§d
r√§1di
r√§1fe
r√§1fi
r√§1fr
r√§1hi
r√§1ka
r√§1li
r√§1mis
r√§1mo
r1√§r
r√§1ra
r√§1ro
r√§1se
r√§te1s
r√§te1t
1r√§tse
r1b
rb1ab
rb1ade
rb1art
rb1auf
rb1ech
rb1erl
rbe1to
rb1ler
rbs1o
rb1th
rby1
r1ca
rch1au
rch1ei
r1chem
r1chif
rch1l
r1chlo
rch1m
rch1r
rch1s
rch1ta
rch1w
r1cl
r1cr
r1da
rd1ak
rd1al
rd1ant
rd1ara
r1deb
rd1elb
rde1mi
r1denk
r1dep
r1desi
rd1ex
r1dez
r1dif
r1dik
rd1inn
rd1iri
rd1ita
r1do
rd1os
rd1rat
rd1t
r1du
r1dy
reb1a
re1bel
reb1l
reb1ra
re1ci
reck1l
1rede
re1dim
1reed
re1em
re1eng
re1er
1refe
1refl
1refo
1reg
r1egg
reh1l
reh1o
r1eig
rei1gl
rei1la
1reim
rei1mi
r1ein
re1inv
rei1r
rei1sc
re1ku
re1leg
1relie
1relig
re1lik
re1lis
re1lu
rem1ei
re1min
rems1c
1renai
re1nat
re1neg
r1entg
r1entl
ren1tr
r1ents
1repo
r1epos
1repu
r1erb
r1erd
r1erek
rer1ep
r1erf
r1erg
re1rie
r1erk
r1erl
r1erm
r1ern√§
r1erne
r1erns
r1ernt
r1er√∂
r1erre
r1erri
r1ersa
r1ert
r1erw
r1erz
1resol
1reson
re1sta
re1str
re√ü1e
re1tai
re1tal
reu1f
r1eur
1reuse
r1evid
r1ex1
1rez
r1f
rf1ant
rf1erg
rf1f
rfs1√§
rf1tu
r1g
rg1ad
rg1ah
rg1ak
rg1all
rg1ap
rg1ask
rg1d
rg1na
rg1no
rg1oa
rg1ob
rg1op
rg1or
rg1√∂d
rg1ral
rg1res
rg1rin
rg1se
rg1si
rg1su
r1h
1ribs
1ric
rief1r
rie1h
rie1i
rier1d
rie1ro
rif1a
rif1ei
rif1o
rig1l
ri1lat
ri1lo
ri1mes
r1ind
rine1i
rine1m
r1inf
ring1l
r1inh
r1innr
r1innu
r1ins
r1inv
rio1b
r1ir
1risik
ri1sko
r1iso
ris1p
1riss
riss1t
1ri√ü1
r1ital
ritt1r
rix1
r1j
r1k
rk1all
rk1lis
rk1ori
rk1r√§u
rk1rin
rkt1o
rkt1r
rkus1t
r1l
rl1ar
rl1asc
rl1aug
rl1c
rl1ste
rl1t
r1mac
rm1ald
rm1ank
rm1ans
rm1anz
rm1aph
rma1ri
r1mas
r1max
rm1d
rme1le
r1merk
rm1erl
rm1erp
rme1st
rmet1t
r1mik
r1mil
rm1im
r1min
rm1m
rm1n
rmo1h
rm1ori
rmo1s
r1mot
rm1p
rm1ti
rm1tu
r1mus
r1na
rn1all
rn1ast
rn1att
r1n√§
rn1c
rn1da
rn1di
rn1do
rn1du
r1neid
r1neig
rn1ema
rn1ene
rn1ep
rn1erk
rn1erl
rn1ert
r1net
rnet1t
rne1uf
rn1g
r1nim
r1nip
r1nis
r1niv
rn1n
rn1op
rn1or
rn1ost
r1not
r1nov
rn1√∂
rn1ta
rn1th
rn1ti
rn1to
rn1tr
r1num
rn1ur
r1n√º
r1ny
rn1z
ro1ca
ro1ci
ro1fe
1roga
1rogg
roh1l
r1ohm
1rohr
ro1ir
ro1ka
ro1ki
ro1lab
ro1lei
ro1lex
ro1lig
rol1s
ro1mi
ro1nau
1ronn
ront1u
ro1nu
ro1of
ro1pei
r1or
ror1m
ro1ru
ro1sei
rosen1
ross1c
ro1sta
rot1s
1roul
1rout
ro1wa
ro1we
ro1wi
1r√∂h
r1√∂k
1r√∂l
r1√∂lp
1r√∂mi
r√∂n1c
r1√∂r
r√∂s1c
r√∂1si
1r√∂sl
1r√∂tu
r1p
rps1t
r1q
r1r
rr1√§m
rr1c
rr1d
rre1l
rr1m
rr1ni
rr1obs
rror1d
rror1t
rr1th
rr1tu
r1s
rs1ad
rs1amt
rs1ebe
rs1ef
rs1epi
rs1erb
rs1ere
rs1er√∂
rs1ers
rs1eta
rs1ph
rs1s
rst1h
rs1tot
rt1abs
rt1ad
rt1ae
rt1akr
rt1all
rt1alp
rt1am
rt1an
r1tap
rt1ar
r1tari
r1tas
rt1att
r1tau
r1t√§
rt1√§rm
rt1√§rz
rte1d
rte1e
r1tee.
r1tees
rte1g
rt1ein
rtei1s
rte1li
r1temp
rten1e
r1tepp
rt1erg
rt1erh
rt1erk
r1term
r1terr
rt1ers
rt1erz
rte1sk
rt1hel
rt1hi
rth1l
r1thu
r1tic
r1tief
rt1ima
rt1ob
r1toc
r1tol
rto1pf
rt1or
r1tor.
rto1ta
r1t√∂
r1tr
rt1rak
rt1rec
rt1ris
rts1o
rt1t
r1tum
rt1up
r1tur
rt1urt
r1tut
r1t√º
rty1l
rt1z
ruar1
1ruf
ruf1f
rufs1p
rug1r
1ruh
r1uhr
1ruin
r1umd
r1una
rund1a
r1unf
r1uni
r1unl
r1unm
r1unse
run1zi
r1ur1
russ1p
1rut
rut1el
rut1h
rut1o
rut1r
1r√º
r√ºck1s
r√ºh1la
r1v
rven1e
rven1z
rvo1le
r1w
ry1m
r1ze
rz1eng
rz1erf
rz1erg
rz1erk
rz1erl
rz1ess
rz1id
r1zie
r1zif
r1zink
r1zins
r1zit
r1z√∂
rz1wa
1sa
s1ab
s1ada
s1adm
s1adr
s1aff
sa1gan
s1agg
s1agr
saik1
s1ak
s1alar
sal1id
s1alk
s1all
s1alt
sal1th
s1ama
s1amei
s1amma
s1amn
s1amp
s1an
san1ge
s1ap
sap1p
s1aq
s1ar
sar1ta
sar1u
s1asi
s1asp
sa1stu
s1asy
s1atem
s1ath
s1atl
s1atta
s1attr
s1au
sauna1
sau1sc
sa1vie
sa1w
1s√§
s1√§h
s1√§lt
s1√§m
s√§1ma
s1√§nd
s1√§p
s1√§r
s1b
sbe1
s1cac
s1ce
1schim
1schn
1schop
sch1se
sch1sk
sch1ta
sch1ti
1schul
s1cl
1scop
1scr
s1cu
s1d
sde1s
sdi1st
sdi1v
se1b
s1eben
se1ca
s1echo
s1echt
s1eck
se1die
se1dis
1seea
see1d
see1h
see1ig
1seel
see1ne
see1ra
see1re
se1erk
se1er√∂
see1t
s1eff
s1egal
se1gem
se1ges
1segm
1segn
1seh
seh1a
seh1ei
seh1in
seh1l
seh1ri
seh1s
seh1t
1seif
s1eig
1seih
s1ein
s1eis
1seit
1sek
sekom1
se1kul
sel1a
sel1d
se1leb
sel1ec
s1eleg
se1lei
s1elix
sel1la
sel1se
sel1sz
sel1ta
sel1tr
1sely
1semin
1semm
s1emp
sen1ac
sen1ad
sen1da
s1endl
se1net
sen1im
sen1tr
s1ents
s1epos
se1rea
s1erf√º
s1erg√§
s1erh
s1erkl
s1ern√§
s1ernt
se1rol
s1eros
s1erot
1serts
s1erz
se1sk
s1essa
1se√ü
1set
se1tan
s1etap
se1ter
s1eth
se1to
se1tu
s1ety
1seuc
se1un
s1ex
1sex.
s1f
s1g
sge1
s1h
sh1ma
1show
sh1t
1sic
1sied
1sieg
1sieh
sig1a
sik1ab
sik1√§
sik1el
siko1
sik1r
sik1t
s1imm
simme1
s1ind
s1inf
sing1a
s1inh
s1ini
s1inq
s1ins
s1int
s1inv
si1pe
si1rin
sis1e
s1iso
sis1p
siv1o
s1j
s1k
1skep
ski1g
ski1s
1skiz
1skop.
sk1q
sk1t
1skulp
s1l
1slal
sliga1
1slip
sli1r
1slow
s1m
sma1d
sma1la
s1n
s1ob
1sod
s1ofe
so1fer
1soft
1sog
so1ga
so1gl
s1ohe
1sohl
s1ohng
s1ohr
so1lan
1sold
sol1ei
solo1
s1oly
1som
s1onk
1sono
sons1o
son1t
so1o
s1op
sop1s
s1orc
s1ord
s1orga
so1rh
s1orie
sor1m
1so1sc
s1ost
s1osz
1so√ü
so1to
so1tr
sound1
s1out
sou1te
s1ove
1sow
so1we
so1wi
s1ox
s1√∂d
s1√∂k
s1√∂l
s√∂n1
s1√∂s
1sp
s1pac
s1pano
s1para
spar1m
s1pav
s1pers
s1pf
s1pist
s1pn
s1ps
s1put
s1py
s1q
s1r
sre1l
sre1ta
ss1aj
ss1alb
ss1att
s1sc
ss1ec
sse1d
sse1ec
sse1hu
ssel1l
sser1d
ss1er√∂
sse1ta
s1sieu
ss1oa
ss1off
sso1m
s1s√∂
ss1pis
ss1s
s1st
ss1tis
1staa
1stad
1staff
1stah
s1tal.
s1talb
s1tale
st1alp
st1alr
1stan
st1ann
s1tari
1stat
st1ave
1st√§
st1edi
s1tee
1steg
steg1r
1steh
st1eid
1steig
s1tele
ste1li
st1epo
stes1e
st1eta
1steu
st1eun
st1ev
st1her
st1hi
st1ho
1stif
1stim
st1inb
s1tip
st1ira
st1iri
st1ita
1stitu
stkom1
st1obl
s1tod
1stof
sto1m
st1omn
s1ton
s1too
1sto√ü
sto1w
1st√∂
s1t√∂l
s1trac
1strah
1strap
1stras
1stra√ü
s1trib
1strik
1stroh
1str√∂
1stru
1str√º
st1s
stsee1
st1t
1stub
1stud
s1tue
1stuf
s1tug
1stuh
1stund
s1tune
st1url
s1turn
st1urt
1stut
1st√º
s1t√ºre
1styl
st1z
1sub1
1suc
s1uf
1sug
s1uh
sum1a
1summ
sum1o
s1umsa
s1umst
sum1t
s1una
s1unf
s1ungl
s1uni
s1uns
1sup
s1urk
s1url
s1ur1t
sus1
s1ut
1s√º
s√ºd1
s1v
s1w
1sy
syl1
s1z
1szene
√ü1a
√üan1
√ü1√§
√ü1b
√übe1
√ü1c
√ü1d
√üdi1s
√ü1eb
√ü1ec
√ü1ef
√ü1eg
√ü1ei
√üel1a
√ü1emp
√üen1a
√ü1entl
√üen1tr
√üer1d
√ü1erf
√ü1er√∂
√ü1erw
√ü1ess
√ü1estr
√ü1ex
√ü1f
√ü1g
√ü1h
√üig1a
√ü1im1
√ü1in
√ü1j
√ü1k
√ü1l
√ü1m
√ü1n
√ü1o
√ü1√∂
√ü1p
√ü1q
√ü1r
√üre1s
√ü1s
√ü1ta
√ü1t√§
√ü1tei
√ü1tel
√üt1h
√üt1in
√ü1to
√ü1t√∂
√ü1tr
√ü1tu
√ü1t√º
√ü1uf
√ü1uh
√ü1um
√ü1una
√ü1uni
√ü1√º
√ü1v
√ü1w
√ü1z
1taba
t1abb
t1abit
t1abt
1tabu
t1ac
t1ada
ta1dat
t1adr
1taf
t1afg
t1afr
ta1fu
1tag
tag1ei
tage1r
t1agg
t1ago
tags1
ta1ins
1tak
t1aka
t1akk
takt1o
tal1an
tal1d
tall1s
t1alm.
ta1lo
tal1or
tal1tr
t1amer
ta1mo
t1ampl
t1amt
ta1mu
t1ana
t1an√§
tand1r
1tank
t1anm
t1anna
1tanne
t1ano
t1anse
t1ansi
t1ansp
t1anza
1tanzg
t1anzu
tanz1w
ta1ph
ta1pu
tar1ap
tar1er
1tarif
t1arm
tar1ma
1tarn
t1arti
t1arz
1tasc
t1asp
ta1tal
tat1an
1tatb
tat1ei
tat1er
ta1the
t1atl
t1auf
tau1fr
1taug
t1auk
1taum
t1ausb
1tausc
t1ausk
t1ausw
ta1ve
1tax
t1axt
1t√§f
1t√§g
t√§l1c
t1√§lt
t1√§mt
t1√§ngs
1t√§nz
t1√§p
t√§r1d
1t√§us
t1b
tbe1
t1c
tch1l
tch1w
t1d
tde1t
1tea
te1b
t1eben
1tec
te1cha
t1ecu
te1em
tee1mi
teen1
te1erw
tee1t
t1egg
1tegre
1tegri
tei1b
tei1gl
1teil
teil1a
tei1m
tei1ra
t1eis.
t1eisb
tei1sc
tei1z
te1ku
tel1ac
tel1au
tel1d
tel1ec
1telef
tele1g
1telep
tel1l√§
tel1√∂
tel1se
tel1sk
tel1ta
tel1tr
tem1ei
tem1or
1tempo
ten1a
t1endf
t1endl
t1endp
ten1eb
ten1ed
t1eng.
ten1im
ten1k
1tenni
1ten√∂
t1entb
t1entl
ten1tr
t1ents
t1epi
tep1t
ter1d
te1rek
t1ergu
te1rom
t1er1√∂
ter1th
ter1uf
t1erzb
ter1zi
tes1ac
t1esel
t1essa
1testb
1tests
te1tab
t1etap
te1tau
te1tee
te1tel
te1tie
te1tis
te1to
tetra1
te1tu
1teuf
te1un
1tex
t1exa
t1exe
t1exi
tex1tr
t1exz
t1f
t1g
tge1r
t1ha
1thal.
1thalp
t1h√§
1th√§t
1thea
t1heb
t1hef
t1hei
1theil
the1in
1thek
1theme
1theo
t1herg
1therm
t1herz
1these
t1hess
1theue
thic1k
t1hiel
t1him
t1hin
t1hir
th1l√§
t1hoc
t1hof
t1hoh
t1hot
ths1t
t1hu
1thum
1thur
t1h√º
1th√ºm
th1w
ti1ag
ti1alk
ti1all
ti1am
ti1chr
t1id
ti1do
1tief.
1tiefs
tie1i
1tierc
ti1eu
ti1fe
ti1fr
t1igel
ti1is
tik1t
1tilg
til1lo
til1s
til1t
ti1maf
ti1mil
t1ind
tine1i
t1inf
ting1a
ting1l
ting1s
t1inh
t1init
t1inj
t1inka
tink1l
t1ins
t1int
1tinu
t1inv
ti1per
ti1ra
tire1r
ti1ret
ti1rh
ti1se
ti1sk
t1isl
ti1so
t1isr
t1i√ü
1tite
ti1ter
ti1th
tiv1o
tiv1r
t1j
t1k
t1l
tle1me
tli1f
tli1sc
t1m
t1n
tness1
t1obs
1tobt
t1ochs
1tocht
tod1er
to1di
to1do
tod1u
to1g
1togg
to1ho
to1k
to1lau
1toler
to1man
tom1en
tom1m
tom1t
tom1u
ton1d
ton1ig
1tonn
1tont
ton1to
to1ny
t1ope
1topo
top1te
to1q
t1ord
t1org
tor1m
t1ort.
tor1ta
to1sc
to1sth
to1tr
1tou
to1wa
1tox
1t√∂ch
t1√∂k
1t√∂lp
1t√∂n
t√∂n1c
1t√∂pf
t1√∂st
1t√∂t
t1p
t1q
t1rad.
1trag
1trai
t1rake
tral1l
tra1na
1trane
1trans
tra1sc
1tr√§
t1reak
t1rech
t1red
1tref
1treib
t1reig
t1reih
t1rein
t1reis
t1reiz
t1rek
1trend
t1rent
t1repe
1trepp
t1rese
t1rest
1tret
tret1r
t1rett
t1rev
t1rh
trie1c
trie1d
tri1gl
1tril
tri1ma
t1rind
t1rinn
t1ritu
tro1b
1troc
tro1ch
tro1ha
tro1he
tro1li
1tropf
tro1r
t1rosa
tro1sc
tro1sm
t1r√∂c
1tr√∂p
t1r√∂ss
1tr√∂t
1trub
truf1t
1trug
t1rum√§
trums1
t1rund
1trunk
1trup
t1rus
t1ru√ü
1tr√ºmm
ts1ad
ts1ahn
ts1amt
tsan1g
ts1as
ts1att
ts1√§n
ts1√§us
t1sc
t1se
ts1eb
ts1eh
ts1eng
ts1ent
ts1ep
ts1er
ts1eti
t1si
ts1id
ts1ir
t1ski.
tsof1
ts1off
t1sol
ts1ori
t1sos
t1souv
t1soz
ts1par
ts1per
ts1ph
ts1pis
ts1s
t1st
ts1tep
ts1th
ts1tie
ts1tis
ts1tor
ts1tri
ts1t√ºr
ts1u
tt1ab
tt1ad
tt1ah
tt1am
tt1ap
t1tari
tt1art
t1tat
t1t√§
tt1ebe
t1tei
tt1eif
tt1ein
tt1eis
ttel1o
ttel1z
ttes1√§
ttes1o
t1thr
tt1igi
t1tint
tto1b
tto1d
tto1l
tto1m
tto1s
tto1w
t1t√∂
tt1rea
tt1ren
t1trog
tt1rud
tts1p
tt1sz
tt1t
tt1uf
t1tut
t1t√º
tt1z
tuba1b
1tuc
t1ufer
t1ukr
t1umh
1tumo
t1umt
t1umw
1tun.
t1una
t1und
t1unf
t1unga
1tunn
t1uno
t1uns
1tup
t1up.
tur1ag
tur1c
tur1d
tur1er
tur1o
tu1sta
1tux
1t√ºch
1t√ºf
1t√ºr.
t√ºr1c
1t√ºrg
1t√ºrs
1t√ºtc
1t√ºte
t1v
t1w
1ty
ty1e
ty1g
ty1k
ty1mu
ty1n
typ1t
ty1r√§
ty1s
ty1z
tz1ag
tz1al
tz1au
tz1√§
tz1ec
tz1eie
tz1eis
t1zell
tz1int
t1z√∂
tz1ti
tz1w√§
tz1wi
tz1wu
tz1z
u1ab
ua1ku
ual1a
ual1√§
ual1d
ual1k
ual1tr
u1am
ua1ma
uam1p
ua1na
uasi1
ua1tin
u1au
u1√§m
u1√§u
u1bec
u1bee
u1beg
u1bema
u1bez
ub1l√§u
u1bl√∂
ub1lu
ub1rit
ubs1pa
uch1a
uch1√§
uch1ec
uch1ei
u1chem
uch1il
uch1in
uch1la
uch1le
uch1li
uch1lo
uch1m
uch1n
uch1op
uch1r
uch1w
u1cit
u1dam
ude1e
ude1i
u1dep
u1dez
udo1b
ud1ra
u1ef
ue1g
u1ei
uel1t
u1emi
uen1a
uen1eb
uer1√§
uer1d
uer1o
u1er√∂
u1erri
uer1th
u1eta
u1eti
ue1to
u1ex1
uf1ab
uf1ak
uf1ane
uf1ar
uf1au
uf1√§r
uf1√§s
uf1√§√ü
uf1ei
uf1em
uf1erh
uf1e√ü
uf1et
uf1fl
u1fic
uf1id
uf1l
uf1n
uf1ori
uf1r
uf1tie
uf1tu
ug1ak
ug1ap
ug1ar
ug1au
ug1d
ug1ei
ug1erf
ug1erl
ug1id
ug1la
ug1l√§
ug1n√§
ugo1
ug1om
ug1op
ug1or
ug1r√§
ug1res
ug1ro
ug1sei
ug1sim
ug1str
ug1stu
u1gui
u1ha
u1h√§
uhe1g
uhe1h
u1hei
uhe1s
uh1la
uh1l√§
uh1ma
uh1mi
u1ho
uhr1a
uhr1er
uh1ri
uhr1o
uhr1t
uh1se
u1h√º
uh1w
uin1g
ui1no
ui1v
u1j
u1kau
u1kera
u1kern
u1ki
u1kla
u1klo
u1kl√∂
ukt1in
ukt1r
u1ku
ul1am
ul1√§m
ul1c
ul1die
ul1do
u1led
u1lei
ul1el
ul1erh
ules1t
ul1eta
ul1id
ulik1t
ul1ins
u1liz
ul1ku
ull1s
ul1n
ul1op
ul1or
ulp1h
ul1tal
ult1ar
ul1tro
u1mac
um1ad
um1ak
uma1li
um1all
um1am
um1an1g
um1anz
um1ap
um1art
u1mas
u1mate
u1max
um1√§h
um1√§rg
um1d
u1mec
um1ef
u1mei
um1ein
umen1e
um1erf
um1erg
um1erl
um1erw
1umf
1umg
um1ide
um1ill
um1ind
um1inh
um1ir
1umk
1uml
um1n
u1mol
u1mon
1umr
1umsat
ums1er
ums1pe
um1tel
um1th
um1ti
um1tu
um1um
um1ur
u1mus
1umz
1unab
un1ac
una1ga
unan1
un1ap
una1s
un1at
una1ta
u1n√§
un1c
1undd
1undf
1undn
und1r
und1t
und1um
1undv
1undz
un1e
unen1e
u1net
unge1b
1unget
1ungew
un1gl
1ungl√º
ungs1
u1nic
1unif
1unio
un1isl
uni1so
1univ
unk1a
unk1es
unk1n
unkom1
unk1s
unn1ad
un1o
1unr
1unsi
1unt
un1ta
un1th
un1ti
un1to
un1tr
unt1s
un1u
u1num
1unw
u1ob
uo1d
u1of1
uor1c
u1pa
1upd
uper1
upf1i
1upg
u1ph
u1pr
upra1
up1si
upt1o
u1q
u1rad
u1rah
ura1k
ur1am
ur1ana
ur1ang
ur1ans
ur1anz
ura1sc
ur1asp
ur1att
ur1au
u1r√§
ur1√§n
urbo1
ure1b
u1rec
u1red
ure1e
u1ref
ur1eff
uren1e
ur1ep
ur1erh
ur1eta
urg1s
u1rhy
ur1ini
ur1int
urk1t
ur1mei
ur1mi
ur1mo
ur1no
uro1b
uro1c
uro1d
ur1off
uro1g
uro1m
uro1sc
urre1c
urs1of
ur1ta
ur1tem
ur1th
ur1tie
ur1tu
u1ruc
u1rui
u1ryt
urz1a
urz1ec
urz1o
urz1w
us1agi
us1amb
us1as
us1ate
us1ec
u1see
us1ei
u1seid
us1erk
us1erl
us1ers
us1erw
us1ese
use1ta
u1sim
u1soa
us1oc
us1oh
us1ou
u1sov
us1pas
us1pat
us1pen
us1ph
us1pic
us1pu
us1so
uss1t√º
u1stal
us1tar
us1tas
us1tau
u1stel
us1th√º
us1tic
us1tob
us1tor
u1stu
us1tur
us1umd
1usus
u√üen1
u√üof1
u√ü1u
ut1alt
ut1ap
ut1ar
ut1√§r
u1t√§t
ut1ed
ute1g
ut1ei.
ut1eie
ut1ein
ut1ela
uten1e
u1teue
ut1ex1
ut1hel
ut1hil
uth1l
ut1ho
u1tit
uto1
u1t√∂
ut1√∂d
u1tras
ut1rea
ut1sk
ut1so
utto1
ut1tr
ut1tu
ut1une
utz1in
utz1w
u1uf
uum1
u1uni
uur1
u1√º
u1v
u1w
u1z
uz1ot
uz1we
1√ºb
√ºb1√§
√ºber1
√ºb1l
√ºb1ro
√ºch1l
√ºchs1c
√ºck1er
√ºck1l
√ºd1a
√ºd1o
√ºd1r
√ºd1t
√ºf1a
√ºf1√§
√ºf1ei
√ºf1erg
√ºf1i
√ºf1l
√ºge1g
√ºgel1a
√ºg1l
√ºh1a
√ºh1ei
√ºh1eng
√ºh1ent
√ºh1er
√ºh1i
√ºh1lam
√ºh1l√§
√ºh1li
√ºh1mi
√ºh1mo
√ºh1o
√ºh1rei
√ºh1ro
√ºh1s
√ºh1tau
√ºh1w
√º1ka
√ºl1a
√ºl1ef
√º1lei
√ºlf1l
√ºlf1r
√ºl1k
√ºll1ad
√ºll1au
√ºm1id
√ºm1in
√ºm1u
√ºn1a
√ºn1do
√ºnf1a
√ºnf1ei
√ºn1ker
√ºn1tee
√ºpel1
√º1pu
√ºr1a
√ºr1ei
√ºr1el
√ºro1
√ºrtel1
√ºsen1
√ºse1s
√ºss1c
√ºt1al
√ºte1d
√ºte1g
√ºte1m
√ºt1r
√ºts1
√º1v
v1ab
va1f
1vag
va1ma
va1st
vat1a
vat1h
vat1in
vat1r
vat1t
vat1u
v1au
v1b
v1c
v1d
veau1s
v1ein
veits1
vel1au
v1ele
ve1lei
1ven√∂
ver1
1vera
ve1rad
1verg
ve1ta
v1f
v1g
v1h
vier1d
vil1a
vil1eh
vil1in
vil1se
v1im
v1ind
ving1
v1int
1vio
1vir
vize1
v1k
v1l
v1m
v1ne
1vo
v1ob
vogel1
von1
v1op
vor1
vot1t
v1p
v1ra
v1re
v1ro
v1sc
v1se
v1si
v1so
v1sta
v1su
v1sz
v1ta
v1t√§
v1to
v1t√∂
v1tr
vue1
v1√º
v1v
v1w
vy1
v1z
1waa
1wag
1wah
1wald
walm1
walt1a
1walz
wand1a
wangs1
1wann
1ware
ware1i
ware1l
waren1
1was
1w√§h
1w√§l
1w√§s
w1√§u
w1b
w1c
w1do
web1a
web1l
1weg
weg1a
weg1l
weg1n
weg1o
weg1r
weg1s
1weh
weh1l
weh1m
wei1k
1weil
wei1m
wei1p
wei1sc
wei1ta
weit1r
welt1
we1me
we1mo
1werbu
1werdu
werg1o
wer1io
1werk.
1werke
wert1o
1wese
west1a
west1o
west1r
1wet
wett1s
we1u
w1g
w1ho
1wid
wie1m
wien1t
1wild
1wir
wire1
wirk1l
1wiss
w1k
w1m
wn1t
1woc
1woh
wo1he
1wolf
wolfs1
wort1a
wort1r
wo1si
1w√∂c
w1p
1wr
w1ro
w1sh
w1sky
ws1s
w1sti
w1ta
w1term
w1ti
w1tr
1wuc
wung1r
1wurst
1wut1
1w√ºh
w1z
x1a
xa1d
xa1fl
xa1g
x1b
x1ca
x1ce
x1ch
x1cl
x1d
x1eges
x1ele
x1em
xen1k
xen1t
x1eu
x1ex
x1f
x1g
x1h
xi1c
xid1em
x1ido
xi1g
xil1l
xil1u
xi1r
xis1e
xi1si
xis1o
xis1s
x1itu
xi1ze
x1j
x1k
xkon1
x1l√§
x1le
x1m
x1n
xo1d
x1oe
xo1p
x1or
x1√∂
x1p
x1q
x1ri
x1s
xt1a
xt1√§
x1t√§t
xt1ed
xt1ein
xt1el
x1tens
xt1erf
x1term
xt1ev
xt1h
xt1ill
xt1o
x1trak
xt1ran
xtra1t
x1trau
xt1re1c
x1tru
xt1s
xt1t
xt1um
xt1un
xt1z
xual1l
x1un
xus1
x1ve
x1w
xy1m
xy1r
xy1t
x1z
y1ab
1yac
ya1g
ya1la
y1am
ya1ra
y1art
y1√§t
y1b
y1ca
y1cr
y1do
ydro1
y1ed
y1ei
yern1
y1est
y1f
y1ga
y1ge
y1gl
y1go
y1gu
y1h
y1in
y1ki
ykol1
y1ku
yl1am
y1l√§
yl1c
yl1d
yl1em
yl1es
ylo1g
yl1s
y1ma
y1me
ym1m
yn1
y1nu
yo1c
yo1k
yo1p
y1ou
y1pa
yp1ab
yp1an
y1p√§
yper1t
yp1id
yp1in
yp1l
ypo1
yp1th
yp1um
y1rau
y1rei
y1rig
yro1
yse1
y1sh
y1so
y1sty
y1sz
y1ta
yto1s
y1tr
y1tu
y1v
y1w
1za
z1ab
z1achs
z1ad
z1af
z1ak
za1ka
z1am
z1an
z1ar
za1res
z1as
z1a√ü
z1at
za1te
za1ti
z1auf
z1aug
z1aut
za1v
1z√§
z1√§c
z√§1hei
z1√§m
z1√§n
z1√§rg
z1√§rm
z1√§us
z1b
zbe1
z1c
z1d
zdi1st
ze1b
z1eben
z1echo
ze1e
z1eff
ze1g
zehen1
1zehnm
1zei
zei1b
zei1d
zei1f
zei1k
zei1la
zei1m
z1ein
ze1ind
zei1r
zei1s
zei1z
zel1a
zel1√§
zel1d
zel1er
zel1in
zel1l√§
zel1o
zel1sk
zel1sz
zel1tr
ze1mi
z1emp
zen1ac
zen1k
zen1ne
zen1th
zent1s
zeo1l
zer1d
ze1rek
z1erg√§
z1erh√∂
z1er√∂
z1erq
z1ersa
z1erw
z1erz
zes1e
zes1p
zess1c
zess1t
ze1sta
zes1tr
ze√ü1
1zet
1zeu
z1ex1
z1f
z1g
zgang1
zgers1
z1h
zi1b
1zic
zid1r
1zieh
1ziel.
zi1go
zi1la
zi1lit
1zim
zimt1
z1ind
z1inf
z1inh
z1inv
zio1d
1zir
z1irr
z1iso
zi1sz
zit1o
zi1z
z1j
z1k
zkom1
z1l
zli1p
z1m
z1n
znei1
1zo
z1oas
z1ob
zo1d
z1of
zof1f
z1oh
zo1ha
zo1k
zo1ma
zoo1f
zoo1t
z1ope
zo1pi
z1or
zo1s
z1osz
1z√∂g
z1√∂k
z1√∂l
z1p
z1q
z1r
z1s
z1ta
zt1ane
zt1au
z1t√§
z1tee
zte1g
z1tei
z1tel
zt1ent
z1term
z1teu
zt1h
z1ther
z1to
z1t√∂
z1tr
zt1rec
zt1s
zt1t
z1tu
z1t√º
zt1z
1zu1
zuer1
zugs1
zug1un
z1uhr
z1um.
z1ums
z1ungl
z1uni
z1uns
z1urk
z1url
z1urs
z1ur1t
1z√º
z1v
1zw
z1wac
z1wal
zwand1
z1war
z1wel
z1wen
z1wer
z1wes
zwie1g
zwil1
z1wo
z1w√∂r
z1wur
z1w√º
1zy
zza1b
zza1m
z1ze
zz1id
zzi1s
z1z√∂
    """)

    def patterns(self):
        """Invariant: patterns() is of type ‚Äúunicode‚Äù.
        Invariant: patterns() provides patterns for the hyphenation algorithm.
        These patterns do not break at hyphenation points, but break where
        ligatures have to be suppressed in german texts. Example:
        auffallend ‚Üí auf fallend
        The patterns are all lower case.
        """
        return GermanLigatureSupport.__germanLigaturePatterns

    def get_word_characters(self):
        """Invariants: Returns a ‚Äúunicode‚Äù value that have to be
        considered as word characters when using the patterns.

        This is the content of the file ‚Äúgerman.tr‚Äù of the Trennmuster
        project (both capital letters and small letters), adding LATIN
        CAPITAL LETTER SHARP S (·∫û) and LATIN SMALL LETTER LONG S (≈ø). So it
        contains all characters that occure in the original word list from
        which the patterns are generated. (So it is likely
        that is contains more characters than the patterns itself.)

        It contains also at least for the pattern itself (not necessarily
        the hole word list) every character to represent every normalization
        form.
        
        NOTE There is no special treatment for Unicode normalization forms.
        
        WARNING This function must be kept in synch with
        simple_case_fold_for_lookup() and also with
        InstructionProvider.get_instructions() which does some Unicode
        normalization.
        """
        return (u"aA√§√Ñ√¢√Ç√†√Ä√°√Å√£√É√•√Ö√¶√ÜbBcC√ß√ádDeE√©√â√®√à√´√ã√™√äfFgGhHiI√≠√ç√¨√å√Æ√éjJkKlLmMnN"
                u"√±√ëoO√≥√ì√≤√í√¥√î√∂√ñ√∏√ò≈ì≈ípPqQrRsS≈°≈†√ütTuU√∫√ö√º√úvVwWxXyY√ø≈∏zZ≈æ≈Ω"
                u"·∫û"  # U+1E9E LATIN CAPITAL LETTER SHARP S
                u"≈ø"  # U+017F LATIN SMALL LETTER LONG S
                u"\u030C\u0302\u0308\u0301")  # combing chars (normalization)


class InstructionProvider(GermanLigatureSupport):
    def __init__(self):
        GermanLigatureSupport.__init__(self)
        self._myHyphenator = Hyphenator(self.patterns())

    def get_instructions(self, my_word):
        """ Get instructions for a single german word ‚Äúmy_word‚Äù.
        Precondition: my_word is of type ‚Äúunicode‚Äù.
        Postcondition: Returns a list with as many elements as my_word has
        elements. Each element is either True, False or None. True means
        that at this index position, a ZWNJ has to be introduced, making
        all characters starting from this index position shifting to the
        right. False means that at this index there is a ZWNJ and this
        ZWNJ has to be removed. None means that nothing has to be done.
        Of course, the list might be emtpy if my_word is empty. my_word
        is supposed to contain a single word, and not various words with
        whitespace. This function handles correctly the soft hyphen
        U+00AD and the following characters with canonical decomposition:
        ≈°√¢√§√©√≥√∂√º
        :rtype: list
        """
        if type(my_word) is not unicode:
            raise TypeError("myWord must be of type ‚Äúunicode‚Äù, but it isn‚Äôt.")
        stripped_word = u""
        stripped_word_index = []
        folded_word = self.simple_case_fold_for_lookup(my_word)
        # Handle normalization‚Ä¶
        #
        # The string is yet folded, so only small letters need to be
        # handeled. We substitute the decomposed form by the composed
        # form (that is used in the pattern). To avoid a different
        # character count, we introduce a soft hyphen. This is okay,
        # because the soft hyphen will be ignored later anyway, and
        # ZWNJ are always inserted before normal characters and never
        # before soft hyphens. We handle only the minimum of
        # canonical composition that really occures in our pattern.
        #
        # WARNING: This must be kept in synch with
        # GermanLigatureSupport.get_word_characters().
        folded_word = folded_word.\
            replace(u"s\u030C", u"≈°\u00AD").\
            replace(u"a\u0302", u"√¢\u00AD").\
            replace(u"a\u0308", u"√§\u00AD").\
            replace(u"e\u0301", u"√©\u00AD").\
            replace(u"o\u0301", u"√≥\u00AD").\
            replace(u"o\u0308", u"√∂\u00AD").\
            replace(u"u\u0308", u"√º\u00AD")
        for my_index in range(len(folded_word)):
            my_character = folded_word[my_index]
            # Do not copy SOFT HYPHEN and ZERO WIDTH NON JOINER
            if my_character not in u"\u00AD\u200C":
                stripped_word += my_character
                stripped_word_index.append(my_index)
        hyphenated_word = self._myHyphenator.hyphenate_word(stripped_word)
        # correct_zwnj_positions will contain the indexes of alphabetic
        # characters before which a ZWNJ
        # should be (index relative to my_word).
        correct_zwnj_positions = []
        i = 0
        # For all partial strings but the last one:
        for j in range(len(hyphenated_word) - 1):
            i += len(hyphenated_word[j])
            correct_zwnj_positions.append(stripped_word_index[i])
        # Make a list with one element for each element in my_word.
        # None means ‚Äúdo nothing‚Äù, True means ‚Äúinsert a ZWNJ here,
        # and False means ‚Äúdelete this ZWNJ‚Äù.
        my_status_list = []
        # First step: remove all ZWNJ, leave the rest without change.
        for my_character in my_word:
            if my_character == u"\u200C":
                my_status_list.append(False)
            else:
                my_status_list.append(None)
        # Second step: cancel the remove where not necessary and
        # add ZWNJ where necessary.
        for i in correct_zwnj_positions:
            if my_status_list[i - 1] == False:
                my_status_list[i - 1] = None
            else:
                my_status_list[i] = True
        return my_status_list


def is_bmp_scalar_only(my_string):
    """In Python 2, the data type ‚Äúunicode‚Äù is supposed to be a unicode
    string and is a sequence of code units. The encoding form might be
    either UTF-16 or UTF-32, depending on the compile time options of the
    python compiler. What does this mean? Example: The character U+0001F404
    COW might be represented either as a sequence of two UTF-16 surrogate
    pairs (string length: 2) or as a single UTF32 code unit
    (string length: 1). If you want to know if you have to deal
    with surrogates or not, you can use this function. It works
    on both UTF-16 and UTF32 sequences.

    Preconditions: my_string is of type ‚Äúunicode‚Äù

    Postconditions: Returns ‚Äúfalse‚Äù if the string contains at least one code
    unit that is not a Unicode scalar value or is not within the
    Basic Multilingual Plane. Returns ‚Äútrue‚Äù otherwise. Quoting from the
    Unicode standard:
    ‚ÄúD76 Unicode scalar value: Any Unicode code point except high-surrogate
    and low-surrogate code points. As a result of this definition, the set of
    Unicode scalar values consists of the ranges 0 to D7FF (16) and E000 (16)
    to 10FFFF (16), inclusive.‚Äù
    """
    if type(my_string) is not unicode:
        raise TypeError(
            "‚Äúmy_string‚Äù must be of type ‚Äúunicode‚Äù, but it isn‚Äôt.")
    return re.search(u"[^\u0000-\uD7FF\uE000-\uFFFF]", my_string) is None


def get_affected_text_objects():
    """Preconditions: import scribus
       Postconditions: Returns a list. The list contains the unique object
       identifier string of each affected text frame in the currently active
       document (if any). If there is a set of objects selected, than only
       the text frames within this set are affected. (This might result in
       an empty list if only non-text-frame objects are currently selected.)
       If there is no currently active document, than the list is empty."""
    my_return_value = []
    if scribus.haveDoc() > 0:
        for i in range(scribus.selectionCount()):
            my_object = scribus.getSelectedObject(i)
            if scribus.getObjectType(my_object) == "TextFrame":
                my_return_value.append(my_object)
    return my_return_value


class StoryInterface:
    """An interface to the content of a ‚Äústory‚Äù in scribus. A story is
    the common text content that is shared by various linked text frames.

    Some of Scribus‚Äô script API is about stories, other parts are about
    the text frames, using different indexes which leads sometime to
    unexpected bahaviour. This class offers a simple interface to the
    story content. It hasn‚Äôt many functions, but it‚Äôs a consistent
    interface and avoids unexpected side effects. It works as expected
    independently of the current text selection, but it might change
    the current text selection. It takes care of the necessary encoding
    and decoding when dealing with scribus, while its public interface
    exposes only functions that work with the data type ‚Äúunicode‚Äù.

    Note: Objects in Scribus (Text frames, images, geometric forms‚Ä¶)
    are supposed to have a unique identifier. However, there is bug
    https://bugs.scribus.net/view.php?id=11926 that allows non-unique
    identifiers. The interaction of StoryInterface with this bug
    has not been tested.
    """

    def __init__(self, text_frame_identifier):
        """Precondition: text_frame_identifier has the data type that is
        used for identifiers for scribus objects and is not empty.
        Postcondition: The object is created."""
        # We assume that the data type of the Scribus object identifier
        # is ‚Äústr‚Äù.
        if type(text_frame_identifier) is not str:
            raise TypeError(
                "argument ‚Äútext_frame_identifier‚Äù has wrong data type.")
        if text_frame_identifier == "":
            raise TypeError(
                "argument ‚Äútext_frame_identifier‚Äù might not have "
                "empty content.")
        self.__identifier = text_frame_identifier

    def read_text(self, first, count):
        """Precondition: The object with the unique identifier ‚ÄútextFrame‚Äù
        (constructor argument) currently exists in the current document,
        and it refers to a text frame. ‚Äúfirst‚Äù and ‚Äúcount‚Äù are non-negative
        integers. The requested range exists really.
        Postcondition: Returns a value of type ‚Äúunicode‚Äù that contains the
        requested text range (the total number of ‚Äúcount‚Äù indexes, starting at
        index ‚Äúfirst‚Äù). Note that the indexes are the indexes provides by
        scribus. This may not be unicode characters, but UTF16 code units, and
        if you choose half a surrogate pair, scribus will silently add the
        missing half surrogate pair. The indexes does not refer to the actual
        text content of ‚ÄútextFrame‚Äù, but to the content of the underlying
        ‚Äústory‚Äù, that means the common text content that is shared between
        this text frame and all linked text frames. Note that this function
        will (likely) change the current text selection of the story."""
        if (type(first) is not int) or (type(count) is not int):
            raise TypeError("Both arguments, ‚Äúfirst‚Äù and ‚Äúcount‚Äù, must be "
                            "integers, but they aren‚Äôt.")
        if (first < 0) or (count < 0):
            raise IndexError("Both arguments, ‚Äúfirst‚Äù and ‚Äúcount‚Äù, must"
                             "not be negative, but they are.")
        if scribus.getObjectType(self.__identifier) != "TextFrame":
            raise RuntimeError("The argument ‚ÄútextFrame‚Äù that was given in "
                               "the constructor does currently not refer to "
                               "a text frame in the current document.")
        # If count is 0, scribus.selectText will select nothing. But when
        # nothing is selected, scribus.getAllText will not return an empty
        # string, but the hole content of the story. That is not what we
        # expect, so we have to catch this case manually.
        if count == 0:
            if first >= self.length():
                raise IndexError("‚Äúfirst‚Äù is out of range.")
            return u""
        scribus.selectText(first, count, self.__identifier)
        return scribus.getAllText(self.__identifier).decode("utf8", "strict")

    def delete_text(self, first, count):
        """Precondition: The object with the unique identifier ‚ÄútextFrame‚Äù
        (constructor argument) currently exists in the current document,
        and it refers to a text frame. ‚Äúfirst‚Äù and ‚Äúcount‚Äù are non-negative
        integers. The requested range exists really.
        Postcondition: Starting from index ‚Äúfirst‚Äù, the number of
        ‚Äúcount‚Äù indexes are removed. Note that the indexes are the
        indexes provides by
        scribus. This may not be unicode characters, but UTF16 code units, and
        if you choose half a surrogate pair, scribus will silently add the
        missing half surrogate pair. The indexes does not refer to the actual
        text content of ‚ÄútextFrame‚Äù, but to the content of the underlying
        ‚Äústory‚Äù, that means the common text content that is shared between
        this text frame and all linked text frames. Note that this function
        will (likely) change the current text selection of the story."""
        if (type(first) is not int) or (type(count) is not int):
            raise TypeError("Both arguments, ‚Äúfirst‚Äù and ‚Äúcount‚Äù, must be "
                            "integers, but they aren‚Äôt.")
        if (first < 0) or (count < 0):
            raise IndexError("Both arguments, ‚Äúfirst‚Äù and ‚Äúcount‚Äù, must"
                             "not be negative, but they are.")
        if scribus.getObjectType(self.__identifier) != "TextFrame":
            raise RuntimeError("The argument ‚ÄútextFrame‚Äù that was given in "
                               "the constructor does currently not refer to "
                               "a text frame in the current document.")
        # If count is 0, scribus.selectText will select nothing. But when
        # nothing is selected, scribus.deleteText will delete the
        # hole content of the story. That is not what we
        # expect, so we have to catch this case manually.
        if count == 0:
            if first >= self.length():
                raise IndexError("‚Äúfirst‚Äù is out of range.")
            return
        scribus.selectText(first, count, self.__identifier)
        return scribus.deleteText(self.__identifier)

    def insert_text(self, text, first):
        """Precondition: The object with the unique identifier ‚ÄútextFrame‚Äù
        (constructor argument) currently exists in the current document,
        and it refers to a text frame. ‚Äúfirst‚Äù is a non-negative
        integer ‚â§ length(). ‚Äútext‚Äù is of type ‚Äúunicode‚Äù.
        Postcondition: The text is inserted at the given index position.

        Note that the indexes are the indexes provided by
        scribus. This may not be unicode characters, but UTF16 code units,
        and if you choose half a surrogate pair, scribus will insert between
        them, making the unicode text string invalid.
        0The indexes does not refer to the actual
        text content of ‚ÄútextFrame‚Äù, but to the content of the underlying
        ‚Äústory‚Äù, that means the common text content that is shared between
        this text frame and all linked text frames. Note that this function
        will (likely) change the current text selection of the story."""
        if (type(first) is not int) or (type(text) is not unicode):
            raise TypeError("‚Äúfirst‚Äù must be ‚Äúinteger‚Äù and ‚Äútext‚Äù must "
                            "be ‚Äúunicode‚Äù, but they aren‚Äôt.")
        if first < 0:
            # We have to check for ‚Äúfirst < 0‚Äù here, because scribus
            # would accept ‚Äúfirst == -1‚Äù as valid, but we do not
            # want this behaviour here.
            raise IndexError("‚Äúfirst‚Äù must"
                             "not be negative, but it is.")
        if scribus.getObjectType(self.__identifier) != "TextFrame":
            raise RuntimeError("The argument ‚ÄútextFrame‚Äù that was given in "
                               "the constructor does currently not refer to "
                               "a text frame in the current document.")
        scribus.insertText(
            text.encode("utf8", "strict"),
            first,
            self.__identifier)

    def length(self):
        """Precondition: The object with the unique identifier ‚ÄútextFrame‚Äù
        (constructor argument) currently exists in the current document,
        and it refers to a text frame.
        Postcondition: Returns an integer that represents the length
        of the text. The mesurement unit of the length is provided
        by Scribus. It is in Scribus 1.5.2 not ‚ÄúUnicode Scalar Values‚Äù,
        but ‚ÄúUTF16 code units‚Äù.
        """
        return scribus.getTextLength(self.__identifier)


def show_messagebox(
        caption,
        message,
        icon=scribus.ICON_NONE,
        button1=scribus.BUTTON_OK,
        button2=scribus.BUTTON_NONE,
        button3=scribus.BUTTON_NONE):
    """Shows a message box. Use this function instead of the original
    function to get more exceptions for wrong argument types and be
    forced to use unicode string. (This function uses an explicit conversion
    command for the unicode string instead of relying to the default
    encoding.)

    Preconditions: ‚Äúcaption‚Äù and ‚Äúmessage‚Äù are of type ‚Äúunicode‚Äù. icon,
    button1, button2 and button3 are either not used or of type int.
    Postcondition: Calls show_messagebox and returns the result."""
    if type(caption) is not unicode:
        raise TypeError("‚Äúcaption‚Äù must be of type ‚Äúunicode‚Äù, but it isn‚Äôt.")
    if type(message) is not unicode:
        raise TypeError("‚Äúmessage‚Äù must be of type ‚Äúunicode‚Äù, but it isn‚Äôt.")
    if type(icon) is not int:
        raise TypeError("‚Äúicon‚Äù must be of type ‚Äúint‚Äù, but it isn‚Äôt.")
    if type(button1) is not int:
        raise TypeError("‚Äúbutton1‚Äù must be of type ‚Äúint‚Äù, but it isn‚Äôt.")
    if type(button2) is not int:
        raise TypeError("‚Äúbutton2‚Äù must be of type ‚Äúint‚Äù, but it isn‚Äôt.")
    if type(button3) is not int:
        raise TypeError("‚Äúbutton3‚Äù must be of type ‚Äúint‚Äù, but it isn‚Äôt.")
    return scribus.messageBox(
        caption.encode("utf8", "strict"),
        message.encode("utf8", "strict"),
        icon,
        button1,
        button2,
        button3)


def do_ligature_setting():
    """Do the ligature setting for the stories behind the selected text
    frames.

    Preconditions: Scribus is available.

    Postconditions: Does the ligature setting."""
    def ligature_setting_for_story(identifier, provider):
        interface = StoryInterface(identifier)
        used_characters = provider.get_word_characters() + u"\u00AD\u200C"
        i = 0
        while i < interface.length():
            temp = interface.read_text(i, 1)
            if temp in used_characters:
                # So temp is guaranteed to contain exclusively Unicode
                # Scalar Values inside the BMP. This is because
                # used_characters does so. This is tested (has
                # to be tested!) before this local function is
                # called.
                # Also my_word will have this characteristic.
                my_word = temp
                story_index = i
                i += 1
                while i < interface.length():
                    temp = interface.read_text(i, 1)
                    if temp in used_characters:
                        my_word += temp
                        i += 1
                    else:
                        break
                # It might be better to ignore words, that have in their
                # character style not the german language attribute, but
                # another language attribute. However, I do not know how
                # to get this working.
                instruction_list = provider.get_instructions(my_word)
                for j in range(len(instruction_list)):
                    # Scribus indexes are UFT16 code units.
                    # The instructions use as indexes either UFT16 code units
                    # or UTF32 code units, depending of the Python build.
                    # However, we have made sure earlier that only Unicode
                    # Scalar Values inside BMP are in used_characters, so
                    # it is guaranteed that here the indexes are the same,
                    # wether it is UTF16 or UTF32. So we can savely use
                    # these indexes to do our modifications in Scribus.
                    if instruction_list[j] == True:
                        # Insert here a ZWNJ.
                        interface.insert_text(u"\u200C", story_index)
                        i += 1
                        story_index += 2
                    elif instruction_list[j] == False:
                        # Delete here a ZWNJ.
                        interface.delete_text(story_index, 1)
                        i -= 1
                    else:
                        # Don‚Äôt make any modifications here.
                        story_index += 1
            else:
                i += 1

    german_locale = \
        re.search(u"^de(u|@|_|$)", scribus.getGuiLanguage()) is not None

    if scribus.haveDoc() <= 0:
        if german_locale:
            show_messagebox(
                u"Ligatursatz",
                u"Kein Dokument gefunden.")
        else:
            show_messagebox(
                u"Ligature setting",
                u"No document found.")
        return
    all_my_objects = get_affected_text_objects()
    if len(all_my_objects) <= 0:
        if german_locale:
            show_messagebox(
                u"Ligatursatz",
                u"Kein Textrahmen ausgew√§hlt.")
        else:
            show_messagebox(
                u"Ligature setting",
                u"No text frame selected.")
        return
    if german_locale:
        result = show_messagebox(
            u"Ligatursatz",
            u"<b>Einf√ºhrung</b>"
                u"<br/>"
                u"Einige Buchstaben\xADkombinationen sind eine "
                u"Heraus\xADforderung f√ºr die Gestaltung von "
                u"Schrift\xADarten. Ein gutes Beispiel ist die "
                u"f\u2011i\u2011Kombi\xADna\xADtion. Das "
                u"kleine\xA0f ist oft aus\xADladend gestaltet, und so "
                u"ent\xADsteht eine unsch√∂ne L√ºcke zwischen dem kleinen\xA0f "
                u"und dem kleinen\xA0i. Viele Schriftarten l√∂sen dieses "
                u"Problem durch Ligaturen. Die Buch\xADstaben werden "
                u"ver\xADschmolzen; so wird die L√ºcke ver\xADmieden und das "
                u"Schrift\xADbild wirkt harmonischer. Im Deutschen gibt es "
                u"nun viele zusammen\xADgesetzte W√∂rter. Ligaturen "
                u"erschweren hier aber das Lesen. Des\xADhalb wird bei "
                u"deutschen Texten <i>in solchen F√§llen</i> keine "
                u"Ligatur gesetzt."
                u"<br/>"
                u"<br/>"
                u"<b>Umsetzung</b>"
                u"<br/>"
                u"Ligaturen werden √ºberall dort gesetzt, wo sie nicht "
                u"durch einen Binde\xADhemmer (Unicode-Zeichen U+200C) "
                u"unter\xADdr√ºckt werden. Dieses kleine Skript arbeitet "
                u"sich nun durch alle ausgew√§hlten und alle mit ihnen "
                u"verketteten Textrahmen und erg√§nzt und entfernt "
                u"Bindehemmer gem√§√ü den Regeln f√ºr deutschen "
                u"Ligatursatz. Dieses Skript basiert "
                u"auf einem W√∂rter\xADbuch, in dem f√ºr viele W√∂rter der "
                u"passende Ligatur\xADsatz hinter\xADlegt ist. Bei W√∂rtern, "
                u"die nicht im W√∂rter\xADbuch ver\xADzeichnet sind, "
                u"ver\xADsucht das Skript, den passenden "
                u"Ligatur\xADsatz zu ‚Äûerraten‚Äú. "
                u"Das Skript setzt Binde\xADhemmer an allen "
                u"Morphem\xADgrenzen, und zwar unabh√§ngig davon, ob die "
                u"unter\xADdr√ºckte Ligatur gebr√§uchlich ist oder in der "
                u"dort verwendeten Schrift\xADart √ºberhaupt vorkommt. Somit "
                u"wird beim Wort ‚ÄûAuflage‚Äú die h√§ufig anzutreffende "
                u"fl\u2011Ligatur durch einen Binde\xADhemmer unterdr√ºckt. Aber "
                u"auch beim Wort ‚ÄûAufgabe‚Äú wird zwischen\xA0f und\xA0g ein "
                u"Binde\xADhemmer gesetzt, obwohl eine fg\u2011Ligatur nicht "
                u"gebr√§uchlich ist. Dieses Vor\xADgehen hat den Nach\xADteil, "
                u"dass wohl viele Binde\xADhemmer gesetzt werden, die "
                u"keinen Effekt haben, weil die Schrift\xADart diese "
                u"Ligaturen √ºberhaupt nicht enth√§lt. Dieses Vor\xADgehen "
                u"hat aber den Vor\xADteil, dass es im Grund\xADsatz f√ºr alle "
                u"Schrift\xADarten funktioniert ‚Äì auch dann, wenn "
                u"Schmuck\xADligaturen ver\xADwendet werden oder die "
                u"Schrift\xADart exotische Ligaturen ent\xADh√§lt.",
                scribus.ICON_NONE,
                scribus.BUTTON_OK,
                scribus.BUTTON_CANCEL)
    else:
        result = show_messagebox(
            u"Ligature setting",
            u"<b>Introduction</b>"
                u"<br/>"
                u"Some character combinations are a challenge for type "
                u"design. A good example is the f-i\xA0combination. The "
                u"small\xA0f has often a spreading design, so there is an "
                u"unpleasant gap between the small\xA0f and the small\xA0i. "
                u"Many fonts solve this problem by using ligatures. The "
                u"glyphs are melt together and the typeface is more "
                u"harmonious. But in German, there are many compound "
                u"words. Now ligatures make reading more difficult. "
                u"Therefore <i>in such cases</i> ligatures are not used "
                u"in German."
                u"<br/>"
                u"<br/>"
                u"<b>Implementation</b>"
                u"<br/>"
                u"Ligatures are used everywhere, except they are "
                u"suppressed with a zero\xA0width non-joiner (Unicode "
                u"character U+200C). This little script walks through "
                u"all selected text frames and all text frames linked "
                u"with them, and completes and removes zero\xA0width "
                u"non-joiner following the rules for German ligatures. "
                u"This script is based on a dictionary "
                u"that provides the fitting ligature setting "
                u"for many German words. For words that are not in the "
                u"dictionary, the script tries to guess the fitting "
                u"ligature setting. The script inserts zero\xA0width "
                u"non-joiners on all morpheme boundaries, regardless of "
                u"whether the suppressed ligature is common or available "
                u"at all in the current font face. So for the word "
                u"‚ÄúAuflage‚Äù the common fl\xA0ligature is suppressed by a "
                u"zero\xA0width non-joiner. But also in the word ‚ÄúAufgabe‚Äù "
                u"a zero\xA0width non-joiner is inserted between\xA0f and\xA0g "
                u"even though an fg ligature is not common. This "
                u"approach has the disadvantage that probably many "
                u"zero\xA0width non-joiners are inserted that will have no "
                u"effect because the font face does not even contain "
                u"these ligatures. But this approach has the advantage "
                u"that is works in principle for all font faces, also "
                u"if discretionary ligatures are used or if the "
                u"font face contains exotic ligatures.",
            scribus.ICON_NONE,
            scribus.BUTTON_OK,
            scribus.BUTTON_CANCEL)
    if result == 4194304:
        return
    if result != 1024:
        raise AssertionError(
            "Expected message result be 1024 or 4194304, but it isn‚Äôt.")
    my_provider = InstructionProvider()
    # Make sure that get_word_characters() has only BMP values.
    word_characters = my_provider.get_word_characters()
    for char in word_characters:
        if not is_bmp_scalar_only(char):
            raise AssertionError("get_word_characters() should return only "
                                 "BMP values, but it doesn‚Äôt.")
    try:
        scribus.setRedraw(False)
        for my_textframe in all_my_objects:
            # For each text frame in our list, we do the ligature setting
            # for the hole story (means, also for all linked text
            # frames). Result: If the user has selected various linked
            # text frames of the same story, than we do all the same
            # work various times. That‚Äôs quite inefficent, but however
            # I don‚Äôt know how to prevent this.
            ligature_setting_for_story(my_textframe, my_provider)
            # Clean the text selection for this Scribus object
            scribus.selectText(0, 0, my_textframe)
        # Show final message (if no exceptions have been raised so far)‚Ä¶
        if german_locale:
            show_messagebox(
                u"Ligatursatz",
                u"Der Ligatursatz ist abgeschlossen.")
        else:
            show_messagebox(
                u"Ligature setting",
                u"Ligature setting has finished.")
    finally:
        # Make sure that redraw gets enabled again.
        scribus.setRedraw(True)
        scribus.redrawAll()

if __name__ == '__main__':
    do_ligature_setting()
